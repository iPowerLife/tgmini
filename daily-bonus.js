import { createClient } from "@supabase/supabase-js"
import { Telegraf, Markup } from "telegraf"

// Initialize Supabase client
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

// Initialize Telegram bot
const botToken = process.env.BOT_TOKEN
const bot = new Telegraf(botToken)

// Import registerUser and addExperience functions (assuming they are in separate modules)
import { registerUser } from "./register-user" // Adjust path as needed
import { addExperience } from "./add-experience" // Adjust path as needed

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function getDailyBonus(userId) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error: userError } = await supabase.from("users").select("*").eq("id", userId).single()

  if (userError) {
    console.error("Error getting user:", userError)
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
  const lastBonusDate = user.last_bonus_date ? new Date(user.last_bonus_date) : null
  const now = new Date()

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, —Ç–æ –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω
  if (
    lastBonusDate &&
    lastBonusDate.getDate() === now.getDate() &&
    lastBonusDate.getMonth() === now.getMonth() &&
    lastBonusDate.getFullYear() === now.getFullYear()
  ) {
    return {
      success: false,
      message: "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!",
    }
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å (–±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å + –±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
  const baseBonus = 50
  const levelBonus = user.level * 10
  const totalBonus = baseBonus + levelBonus

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
  const { error: updateError } = await supabase
    .from("users")
    .update({
      balance: user.balance + totalBonus,
      last_bonus_date: now.toISOString(),
    })
    .eq("id", userId)

  if (updateError) {
    console.error("Error updating user:", updateError)
    return { success: false, message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" }
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  await supabase.from("transactions").insert([
    {
      user_id: userId,
      amount: totalBonus,
      type: "daily_bonus",
      description: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å",
    },
  ])

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
  const expGained = 20
  await addExperience(userId, expGained)

  return {
    success: true,
    message: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${totalBonus} –º–æ–Ω–µ—Ç (${baseBonus} –±–∞–∑–æ–≤—ã–π + ${levelBonus} –∑–∞ —É—Ä–æ–≤–µ–Ω—å) –∏ ${expGained} –æ–ø—ã—Ç–∞!`,
    bonus: totalBonus,
    balance: user.balance + totalBonus,
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤ Supabase:
// ALTER TABLE users ADD COLUMN last_bonus_date TIMESTAMP;

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
bot.command("daily", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const result = await getDailyBonus(user.id)
  ctx.reply(result.message)

  if (result.success) {
    ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
  }
})

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
bot.hears("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const result = await getDailyBonus(user.id)
  ctx.reply(result.message)

  if (result.success) {
    ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
  }
})

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∫–æ–º–∞–Ω–¥–µ start
bot.start(async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞–π–Ω–∏–Ω–≥, ${ctx.from.first_name}!`,
      Markup.keyboard([
        ["‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å", "üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"],
        ["‚ùì –ü–æ–º–æ—â—å"],
      ]).resize(),
    )
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
export { getDailyBonus }

