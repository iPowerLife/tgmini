"use client"

import { useState, useEffect, useRef } from "react"
import { useNavigate } from "react-router-dom"
import { MinersModal } from "../components/miners-modal"
import { BoostsModal } from "../components/boosts-modal"
import { PoolsModal } from "../components/pools-modal"
import { supabase } from "../supabase"

const HomePage = ({ user: initialUser }) => {
  const [user, setUser] = useState(initialUser)
  const [showMinersModal, setShowMinersModal] = useState(false)
  const [showBoostsModal, setShowBoostsModal] = useState(false)
  const [showPoolsModal, setShowPoolsModal] = useState(false)
  const [minerInfo, setMinerInfo] = useState({
    pool: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
    hashrate: 0,
    energy: 0,
    hourlyIncome: 0,
    totalMined: 0,
  })
  const [currentPool, setCurrentPool] = useState(null)
  const [miningData, setMiningData] = useState(null)
  const navigate = useNavigate()
  const modalOpenRef = useRef(false)

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –Ω–∞—á–∞–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log("HomePage –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user)
  }, [user])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ
  useEffect(() => {
    const fetchMiningInfo = async () => {
      if (!user?.id) {
        console.log("–ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
      }

      try {
        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.id)

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–∏–Ω–≥–µ —á–µ—Ä–µ–∑ RPC
        const { data: miningInfoData, error: miningInfoError } = await supabase.rpc("get_mining_info_with_rewards", {
          user_id_param: user.id,
        })

        if (miningInfoError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ:", miningInfoError)
        } else {
          console.log("–î–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞:", miningInfoData)
          setMiningData(miningInfoData)

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
          if (miningInfoData?.pool) {
            setCurrentPool({
              id: miningInfoData.pool.id,
              name: miningInfoData.pool.display_name || miningInfoData.pool.name,
            })
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
          setMinerInfo({
            pool: miningInfoData?.pool?.display_name || miningInfoData?.pool?.name || "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
            hashrate: miningInfoData?.total_hashrate || 0,
            energy: miningInfoData?.energy || 0,
            hourlyIncome: miningInfoData?.rewards?.hourly_rate || 0,
            totalMined: miningInfoData?.rewards?.amount || 0,
          })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ:", error)
      }
    }

    fetchMiningInfo()
  }, [user])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleBalanceUpdate = (newBalance) => {
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", newBalance)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ newBalance - —ç—Ç–æ —á–∏—Å–ª–æ
    const numericBalance = typeof newBalance === "string" ? Number.parseFloat(newBalance) : newBalance

    if (isNaN(numericBalance)) {
      console.error("–û—à–∏–±–∫–∞: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º", newBalance)
      return
    }

    console.log("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", user?.balance, "–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", numericBalance)

    setUser((prevUser) => {
      const updatedUser = {
        ...prevUser,
        balance: numericBalance,
      }
      console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", updatedUser)
      return updatedUser
    })
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –Ω–æ –Ω–µ –∫–ª–∏–∫–æ–≤
  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const blockScroll = (e) => {
      // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
      if (modalOpenRef.current) {
        return true
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      if (
        e.type === "wheel" ||
        e.type === "mousewheel" ||
        e.type === "DOMMouseScroll" ||
        (e.type === "touchmove" && e.touches.length > 0)
      ) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        let target = e.target
        while (target) {
          if (
            target.classList &&
            (target.classList.contains("miners-list") || target.classList.contains("custom-scrollbar"))
          ) {
            // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            return true
          }
          target = target.parentElement
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        e.preventDefault()
        return false
      }
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
      return true
    }

    // –°–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const scrollEvents = ["wheel", "mousewheel", "DOMMouseScroll", "touchmove"]

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    scrollEvents.forEach((event) => {
      document.addEventListener(event, blockScroll, { passive: false })
      window.addEventListener(event, blockScroll, { passive: false })
    })

    // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    document.body.style.overflow = "hidden"
    document.documentElement.style.overflow = "hidden"

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏
    const style = document.createElement("style")
    style.innerHTML = `
    html, body {
      overflow: hidden !important;
      height: 100% !important;
      width: 100% !important;
      overscroll-behavior: none !important;
    }
    
    /* –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö */
    .miners-list, .custom-scrollbar {
      overflow-y: auto !important;
      overscroll-behavior: contain !important;
    }
  `
    document.head.appendChild(style)

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      scrollEvents.forEach((event) => {
        document.removeEventListener(event, blockScroll)
        window.removeEventListener(event, blockScroll)
      })
      document.body.style.overflow = ""
      document.documentElement.style.overflow = ""
      document.head.removeChild(style)
    }
  }, [])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    modalOpenRef.current = showMinersModal || showBoostsModal || showPoolsModal
  }, [showMinersModal, showBoostsModal, showPoolsModal])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
  const handleShopClick = () => {
    navigate("/shop")
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–ª–∞
  const handlePoolSelect = (pool) => {
    setCurrentPool(pool)
    setMinerInfo((prev) => ({
      ...prev,
      pool: pool.name,
    }))

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
    if (pool.reward_multiplier && pool.difficulty) {
      setMinerInfo((prev) => ({
        ...prev,
        hourlyIncome: (prev.hashrate * 0.1 * pool.reward_multiplier) / pool.difficulty,
      }))
    }
  }

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  const squareButtonStyle = {
    width: "60px",
    height: "60px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0",
    borderRadius: "12px",
    backgroundColor: "rgba(59, 130, 246, 0.8)",
    backdropFilter: "blur(4px)",
    color: "white",
    transition: "all 0.2s ease",
    cursor: "pointer",
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:", user)
  }, [user])

  return (
    <div className="fixed inset-0 overflow-hidden">
      {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
      <div
        className="absolute inset-0 z-0"
        style={{
          backgroundImage:
            'url("https://hebbkx1anhila5yf.public.blob.vercel-storage.com/kandinsky-download-1741700347819-wTpegQamRbD36vdjw4hDDi5V3igvXt.png")',
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        {/* –û–≤–µ—Ä–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ */}
        <div className="absolute inset-0 bg-black/40"></div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="relative z-10 h-full flex flex-col">
        {/* –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ —Å –±–∞–ª–∞–Ω—Å–æ–º */}
        <div className="bg-[#242838]/80 backdrop-blur-sm p-3 rounded-lg mx-2 mt-2">
          <div className="text-center">
            <h2 className="font-bold text-blue-400">–ë–∞–ª–∞–Ω—Å: {user?.balance || 0} üíé</h2>
            <p className="text-gray-300">Miner Pass: {user?.hasMinerPass ? "–ê–∫—Ç–∏–≤–µ–Ω ‚ú®" : "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}</p>
          </div>
        </div>

        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–π–Ω–∏–Ω–≥–µ –∏ –Ω–∞–≥—Ä–∞–¥–∞—Ö */}
        <div className="mx-2"></div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –º–∞–π–Ω–µ—Ä–æ–º */}
        <div className="flex-1 grid grid-cols-[60px_1fr_60px] gap-2 px-2 mt-2">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
          <div className="flex flex-col items-center pt-4">
            <div className="space-y-4">
              <button
                style={squareButtonStyle}
                onClick={() => setShowMinersModal(true)}
                className="hover:bg-blue-600/80"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect>
                  <rect x="9" y="9" width="6" height="6"></rect>
                  <line x1="9" y1="2" x2="9" y2="4"></line>
                  <line x1="15" y1="2" x2="15" y2="4"></line>
                  <line x1="9" y1="20" x2="9" y2="22"></line>
                  <line x1="15" y1="20" x2="15" y2="22"></line>
                  <line x1="20" y1="9" x2="22" y2="9"></line>
                  <line x1="20" y1="14" x2="22" y2="14"></line>
                  <line x1="2" y1="9" x2="4" y2="9"></line>
                  <line x1="2" y1="14" x2="4" y2="14"></line>
                </svg>
              </button>

              <button
                style={squareButtonStyle}
                onClick={() => setShowBoostsModal(true)}
                className="hover:bg-blue-600/80"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon>
                </svg>
              </button>

              <button style={squareButtonStyle} className="hover:bg-blue-600/80">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="8" y1="6" x2="21" y2="6"></line>
                  <line x1="8" y1="12" x2="21" y2="12"></line>
                  <line x1="8" y1="18" x2="21" y2="18"></line>
                  <line x1="3" y1="6" x2="3.01" y2="6"></line>
                  <line x1="3" y1="12" x2="3.01" y2="12"></line>
                  <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
              </button>
            </div>
          </div>

          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞–π–Ω–µ—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –º–∞–π–Ω–∏–Ω–≥–∞ */}
          <div className="flex flex-col">
            {/* –ú–∞–π–Ω–µ—Ä */}
            <div className="aspect-square flex items-center justify-center bg-[#242838]/60 backdrop-blur-sm rounded-lg border border-blue-500/20 overflow-hidden mb-2">
              <div className="miner-animation">
                <style jsx>{`
                .miner-animation {
                  position: relative;
                  width: 100%;
                  height: 100%;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                }
                
                .miner-animation:before {
                  content: '';
                  position: absolute;
                  width: 80px;
                  height: 80px;
                  background: rgba(59, 130, 246, 0.8);
                  border-radius: 15px;
                  animation: pulse 2s infinite;
                }
                
                .miner-animation:after {
                  content: 'üíé';
                  position: absolute;
                  font-size: 32px;
                  animation: float 3s ease-in-out infinite;
                }
                
                @keyframes pulse {
                  0% {
                    transform: scale(0.95);
                    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
                  }
                  
                  70% {
                    transform: scale(1);
                    box-shadow: 0 0 0 15px rgba(59, 130, 246, 0);
                  }
                  
                  100% {
                    transform: scale(0.95);
                    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
                  }
                }
                
                @keyframes float {
                  0% {
                    transform: translateY(0px);
                  }
                  50% {
                    transform: translateY(-20px);
                  }
                  100% {
                    transform: translateY(0px);
                  }
                }
              `}</style>
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
          <div className="flex flex-col items-center pt-4">
            <div className="space-y-4">
              <button
                style={squareButtonStyle}
                onClick={() => setShowPoolsModal(true)}
                className="hover:bg-blue-600/80"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 2L2 7l10 5 10-5-10-5z"></path>
                  <path d="M2 17l10 5 10-5"></path>
                  <path d="M2 12l10 5 10-5"></path>
                </svg>
              </button>

              <button style={squareButtonStyle} onClick={handleShopClick} className="hover:bg-blue-600/80">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
              </button>

              <button style={squareButtonStyle} className="hover:bg-blue-600/80">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <circle cx="12" cy="12" r="3"></circle>
                  <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showMinersModal && <MinersModal onClose={() => setShowMinersModal(false)} user={user} />}

      {showBoostsModal && <BoostsModal onClose={() => setShowBoostsModal(false)} user={user} />}

      {showPoolsModal && (
        <PoolsModal
          onClose={() => setShowPoolsModal(false)}
          user={user}
          currentPool={currentPool}
          onPoolSelect={handlePoolSelect}
        />
      )}
    </div>
  )
}

export default HomePage

