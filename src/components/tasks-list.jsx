"use client"

import { useState } from "react"
import { ArrowRight, LinkIcon } from "lucide-react"
import { supabase } from "../supabase"

export function TasksList({ tasks, type, user }) {
  const [processingTasks, setProcessingTasks] = useState({})
  const [verificationTimers, setVerificationTimers] = useState({})

  const startTask = async (taskId) => {
    try {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: true }))

      const { data, error } = await supabase.rpc("start_task", {
        user_id_param: user.id,
        task_id_param: taskId,
      })

      if (error) throw error

      const timer = setInterval(() => {
        setVerificationTimers((prev) => {
          const timeLeft = (prev[taskId] || 15) - 1
          if (timeLeft <= 0) {
            clearInterval(timer)
            return { ...prev, [taskId]: 0 }
          }
          return { ...prev, [taskId]: timeLeft }
        })
      }, 1000)

      setVerificationTimers((prev) => ({ ...prev, [taskId]: 15 }))
    } catch (error) {
      console.error("Error starting task:", error)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
    } finally {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: false }))
    }
  }

  const completeTask = async (taskId) => {
    try {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: true }))

      const { data, error } = await supabase.rpc("complete_task", {
        user_id_param: user.id,
        task_id_param: taskId,
      })

      if (error) throw error

      if (data.success) {
        alert("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")
      } else if (data.remaining_seconds) {
        alert(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${data.remaining_seconds} —Å–µ–∫—É–Ω–¥`)
      }
    } catch (error) {
      console.error("Error completing task:", error)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
    } finally {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: false }))
    }
  }

  const claimReward = async (taskId) => {
    try {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: true }))

      const { data, error } = await supabase.rpc("claim_task_reward", {
        user_id_param: user.id,
        task_id_param: taskId,
      })

      if (error) throw error

      if (data.success) {
        alert(`–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${data.reward} üíé`)
      }
    } catch (error) {
      console.error("Error claiming reward:", error)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã")
    } finally {
      setProcessingTasks((prev) => ({ ...prev, [taskId]: false }))
    }
  }

  if (!Array.isArray(tasks)) {
    return null
  }

  if (!tasks.length) {
    return (
      <div className="flex items-center justify-center p-4">
        <div className="text-sm text-gray-400">
          {type === "limited"
            ? "–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
            : type === "achievement"
              ? "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
              : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"}
        </div>
      </div>
    )
  }

  return (
    <div className="p-4 space-y-3">
      {tasks.map((task) => (
        <div key={task.id} className="bg-gray-900/50 rounded-lg p-4 space-y-3">
          <div>
            <h3 className="text-base text-white font-medium">{task.title}</h3>
            <p className="text-sm text-gray-400 mt-1">{task.description}</p>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className="text-base font-medium text-blue-400">{task.reward} üíé</span>
            </div>

            {!task.user_status && (
              <div className="flex gap-2">
                {task.link && (
                  <button
                    onClick={() => window.open(task.link, "_blank")}
                    disabled={processingTasks[task.id]}
                    className="flex items-center gap-1.5 px-3 py-1.5 rounded-lg bg-gray-800 text-sm text-white hover:bg-gray-700 transition-colors disabled:opacity-50"
                  >
                    <LinkIcon className="w-4 h-4" />
                    –ü–µ—Ä–µ–π—Ç–∏
                  </button>
                )}
                <button
                  onClick={() => startTask(task.id)}
                  disabled={processingTasks[task.id]}
                  className="flex items-center gap-1.5 px-3 py-1.5 rounded-lg bg-blue-500 text-sm text-white hover:bg-blue-600 transition-colors disabled:opacity-50"
                >
                  –ù–∞—á–∞—Ç—å
                  <ArrowRight className="w-4 h-4" />
                </button>
              </div>
            )}

            {task.user_status === "active" && verificationTimers[task.id] === 0 && (
              <button
                onClick={() => completeTask(task.id)}
                disabled={processingTasks[task.id]}
                className="px-3 py-1.5 rounded-lg bg-blue-500 text-sm text-white hover:bg-blue-600 transition-colors disabled:opacity-50"
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            )}

            {task.user_status === "completed" && !task.reward_claimed && (
              <button
                onClick={() => claimReward(task.id)}
                disabled={processingTasks[task.id]}
                className="px-3 py-1.5 rounded-lg bg-blue-500 text-sm text-white hover:bg-blue-600 transition-colors disabled:opacity-50"
              >
                –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
              </button>
            )}
          </div>

          {task.user_status === "active" && verificationTimers[task.id] > 0 && (
            <div>
              <div className="h-1 bg-gray-800 rounded-full overflow-hidden">
                <div
                  className="h-full bg-blue-500 transition-all duration-1000"
                  style={{ width: `${(verificationTimers[task.id] / 15) * 100}%` }}
                />
              </div>
              <p className="text-center text-sm text-gray-400 mt-1">–ü—Ä–æ–≤–µ—Ä–∫–∞: {verificationTimers[task.id]} —Å–µ–∫</p>
            </div>
          )}
        </div>
      ))}
    </div>
  )
}

