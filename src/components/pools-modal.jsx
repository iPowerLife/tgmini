"use client"

import { useState, useEffect } from "react"
import { supabase } from "../supabase"

export function PoolsModal({ onClose, user, currentPool, onPoolSelect }) {
  const [pools, setPools] = useState([])
  const [loading, setLoading] = useState(true)
  const [selectedPoolId, setSelectedPoolId] = useState(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–∞—Ö
  useEffect(() => {
    const fetchPools = async () => {
      try {
        setLoading(true)

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤...")

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã mining_pools
        const { data, error } = await supabase
          .from("mining_pools")
          .select("*")
          .order("fee_percent", { ascending: true })

        if (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ mining_pools:", error)
          throw error
        }

        console.log("–î–∞–Ω–Ω—ã–µ mining_pools:", data)

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤
        const formattedPools = data
          ? data.map((pool) => ({
              id: pool.id,
              name: pool.display_name || pool.name,
              description: pool.description || "–ú–∞–π–Ω–∏–Ω–≥ –ø—É–ª",
              difficulty: pool.min_miners || 1,
              reward_multiplier: pool.multiplier || 1,
              stability: 100 - (pool.fee_percent || 0),
              fee: pool.fee_percent || 0,
            }))
          : []

        setPools(formattedPools)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–ª
        if (currentPool?.id) {
          setSelectedPoolId(currentPool.id)
        } else if (formattedPools.length > 0) {
          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—É–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞
          setSelectedPoolId(formattedPools[0].id)
        }

        setLoading(false)
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—É–ª–æ–≤:", err)

        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testPools = [
          {
            id: 3,
            name: "–ü—Ä–µ–º–∏—É–º –ø—É–ª",
            description: "–≠–ª–∏—Ç–Ω—ã–π –ø—É–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é",
            difficulty: 5,
            reward_multiplier: 1.3,
            stability: 99,
            fee: 1,
          },
          {
            id: 2,
            name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—É–ª",
            description: "–ü—É–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é",
            difficulty: 3,
            reward_multiplier: 1.15,
            stability: 97,
            fee: 3,
          },
          {
            id: 1,
            name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª",
            description: "–ë–∞–∑–æ–≤—ã–π –ø—É–ª –¥–ª—è –≤—Å–µ—Ö –º–∞–π–Ω–µ—Ä–æ–≤",
            difficulty: 1,
            reward_multiplier: 1,
            stability: 95,
            fee: 5,
          },
        ]

        setPools(testPools)

        if (currentPool?.id) {
          setSelectedPoolId(currentPool.id)
        } else {
          setSelectedPoolId(testPools[0].id)
        }

        setLoading(false)
      }
    }

    fetchPools()
  }, [currentPool])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É–ª–∞
  const handleSelectPool = async (pool) => {
    try {
      console.log("–í—ã–±–æ—Ä –ø—É–ª–∞:", pool)

      if (user?.id) {
        // –û–±–Ω–æ–≤–ª—è–µ–º mining_pool —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { error } = await supabase.from("users").update({ mining_pool: pool.id }).eq("id", user.id)

        if (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ mining_pool:", error)
          throw error
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setSelectedPoolId(pool.id)

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      if (onPoolSelect) {
        onPoolSelect(pool)
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      onClose()
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–ª–∞:", error)
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø—É–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –ø—É–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const getPoolStyles = (pool) => {
    const styles = {
      container: "",
      title: "",
      icon: "",
    }

    if (pool.difficulty >= 5) {
      // –ü—Ä–µ–º–∏—É–º –ø—É–ª
      styles.container = "bg-gradient-to-br from-yellow-900/30 to-yellow-600/20 border-yellow-600/30"
      styles.title = "text-yellow-400 font-semibold"
      styles.icon = "üíÄ"
    } else if (pool.difficulty >= 3) {
      // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—É–ª
      styles.container = "bg-gradient-to-br from-purple-900/30 to-purple-600/20 border-purple-600/30"
      styles.title = "text-purple-400"
      styles.icon = "üî•"
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É–ª
      styles.container = "bg-gradient-to-br from-blue-900/30 to-blue-600/20 border-blue-600/30"
      styles.title = "text-blue-400"
      styles.icon = "üåä"
    }

    return styles
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#1a1d2d] p-4 rounded-lg w-[90%] max-w-md">
        <div className="flex justify-between items-center mb-3">
          <h3 className="text-xl font-bold text-blue-400">–ú–∞–π–Ω–∏–Ω–≥ –ø—É–ª—ã</h3>
          <button className="text-gray-400 hover:text-white transition-colors" onClick={onClose}>
            ‚úï
          </button>
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-6">
            <div className="w-8 h-8 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
          </div>
        ) : pools.length === 0 ? (
          <div className="text-center py-6 text-gray-400">
            <p>–ü—É–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
          </div>
        ) : (
          <div className="space-y-2 max-h-[60vh] overflow-y-auto pr-1 custom-scrollbar">
            {pools.map((pool) => {
              const styles = getPoolStyles(pool)
              return (
                <div
                  key={pool.id}
                  className={`p-3 rounded-lg border transition-all cursor-pointer ${styles.container}`}
                  onClick={() => handleSelectPool(pool)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center flex-1">
                      <span className="text-2xl mr-2">{styles.icon}</span>
                      <div>
                        <h4 className={`${styles.title} text-sm`}>{pool.name}</h4>
                        <p className="text-xs text-gray-400 line-clamp-1">{pool.description}</p>
                      </div>
                    </div>
                    {selectedPoolId === pool.id && (
                      <div className="ml-2 px-2 py-0.5 bg-blue-500/20 text-blue-400 rounded text-xs">–ê–∫—Ç–∏–≤–µ–Ω</div>
                    )}
                  </div>

                  <div className="mt-2 grid grid-cols-2 gap-x-2 gap-y-1 text-xs">
                    <div className="text-gray-400 flex items-center">
                      <span className="w-3 h-3 inline-block mr-1">‚öôÔ∏è</span>
                      –°–ª–æ–∂–Ω–æ—Å—Ç—å: <span className={`${styles.title} ml-1`}>{pool.difficulty}x</span>
                    </div>
                    <div className="text-gray-400 flex items-center">
                      <span className="w-3 h-3 inline-block mr-1">üíé</span>
                      –ù–∞–≥—Ä–∞–¥–∞: <span className={`${styles.title} ml-1`}>x{pool.reward_multiplier}</span>
                    </div>
                    <div className="text-gray-400 flex items-center">
                      <span className="w-3 h-3 inline-block mr-1">üîÑ</span>
                      –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: <span className={`${styles.title} ml-1`}>{pool.stability}%</span>
                    </div>
                    <div className="text-gray-400 flex items-center">
                      <span className="w-3 h-3 inline-block mr-1">üí∞</span>
                      –ö–æ–º–∏—Å—Å–∏—è: <span className={`${styles.title} ml-1`}>{pool.fee}%</span>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        )}

        <style jsx global>{`
          .custom-scrollbar {
            -ms-overflow-style: none;
            scrollbar-width: none;
            overscroll-behavior: contain;
          }

          .custom-scrollbar::-webkit-scrollbar {
            display: none;
          }
        `}</style>
      </div>
    </div>
  )
}

