"use client"

import { useState, useEffect, useCallback } from "react"
import { Coins, Clock, ChevronDown, ChevronUp } from "lucide-react"
import { supabase } from "../supabase"

export const MiningRewardsNew = ({ userId, onCollect, balance = 0 }) => {
  const [loading, setLoading] = useState(true)
  const [collecting, setCollecting] = useState(false)
  const [miningProgress, setMiningProgress] = useState(null)
  const [error, setError] = useState(null)
  const [selectedPeriod, setSelectedPeriod] = useState(null)
  const [showPeriods, setShowPeriods] = useState(false)
  const [rewards, setRewards] = useState([])
  const [timeLeft, setTimeLeft] = useState(0)
  const [updateInterval, setUpdateInterval] = useState(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  const loadMiningProgress = useCallback(async () => {
    if (!userId) return

    try {
      setError(null)

      const { data, error } = await supabase.rpc("get_mining_progress", {
        user_id_param: userId,
      })

      if (error) throw error

      console.log("Mining progress loaded:", data)
      setMiningProgress(data)

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞
      if (data.time_until_collection > 0) {
        setTimeLeft(data.time_until_collection * 1000)
      } else {
        setTimeLeft(0)
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–≥—Ä–∞–¥
      if (data.hashrate > 0) {
        const settings = await supabase.rpc("get_mining_settings")
        if (settings.error) throw settings.error

        const minPeriod = settings.data.min_collection_period_hours
        const standardPeriod = settings.data.collection_interval_hours
        const maxPeriod = settings.data.max_collection_period_hours
        const baseRate = settings.data.base_reward_rate

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
        const { data: poolData } = await supabase
          .from("mining_pools")
          .select("*")
          .eq("name", data.pool_name || "standard")
          .single()

        const poolMultiplier = data.pool_multiplier
        const feePercent = poolData?.fee_percent || 5

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        const rewardsData = [
          {
            period: minPeriod,
            amount: calculateReward(data.hashrate, minPeriod, baseRate, poolMultiplier, feePercent),
            fee_amount: calculateFee(data.hashrate, minPeriod, baseRate, poolMultiplier, feePercent),
            total_amount: calculateTotal(data.hashrate, minPeriod, baseRate, poolMultiplier),
          },
          {
            period: standardPeriod,
            amount: calculateReward(data.hashrate, standardPeriod, baseRate, poolMultiplier, feePercent),
            fee_amount: calculateFee(data.hashrate, standardPeriod, baseRate, poolMultiplier, feePercent),
            total_amount: calculateTotal(data.hashrate, standardPeriod, baseRate, poolMultiplier),
          },
          {
            period: maxPeriod,
            amount: calculateReward(data.hashrate, maxPeriod, baseRate, poolMultiplier, feePercent),
            fee_amount: calculateFee(data.hashrate, maxPeriod, baseRate, poolMultiplier, feePercent),
            total_amount: calculateTotal(data.hashrate, maxPeriod, baseRate, poolMultiplier),
          },
        ]

        setRewards(rewardsData)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
        if (!selectedPeriod) {
          setSelectedPeriod(rewardsData[1])
        }
      }
    } catch (err) {
      console.error("Error loading mining progress:", err)
      setError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞")
    } finally {
      setLoading(false)
    }
  }, [userId, selectedPeriod])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã
  const calculateReward = (hashrate, period, baseRate, multiplier, feePercent) => {
    const total = hashrate * period * baseRate * multiplier
    const fee = total * (feePercent / 100)
    return Number.parseFloat((total - fee).toFixed(2))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
  const calculateFee = (hashrate, period, baseRate, multiplier, feePercent) => {
    const total = hashrate * period * baseRate * multiplier
    return Number.parseFloat((total * (feePercent / 100)).toFixed(2))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
  const calculateTotal = (hashrate, period, baseRate, multiplier) => {
    return Number.parseFloat((hashrate * period * baseRate * multiplier).toFixed(2))
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (!userId) return

    console.log("MiningRewardsNew component mounted")
    loadMiningProgress()

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      loadMiningProgress()
    }, 30000)

    setUpdateInterval(interval)

    return () => {
      console.log("MiningRewardsNew component unmounted")
      if (updateInterval) clearInterval(updateInterval)
    }
  }, [userId, loadMiningProgress])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  useEffect(() => {
    if (timeLeft <= 0) return

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        const newTime = prev <= 1000 ? 0 : prev - 1000
        return newTime
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [timeLeft])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
  const handleCollect = async () => {
    if (!userId || !selectedPeriod) return

    try {
      setCollecting(true)
      setError(null)

      const { data, error } = await supabase.rpc("collect_mining_rewards_new", {
        user_id_param: userId,
        period_hours_param: selectedPeriod.period,
      })

      if (error) throw error

      if (data.success) {
        console.log("Rewards collected:", data)

        // –í—ã–∑—ã–≤–∞–µ–º onCollect —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        if (typeof onCollect === "function") {
          onCollect(data.new_balance)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞
        if (!miningProgress.has_pass && !miningProgress.allow_anytime_collection) {
          setTimeLeft(miningProgress.collection_interval_hours * 60 * 60 * 1000)
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–π–Ω–∏–Ω–≥–µ
        await loadMiningProgress()
      } else {
        setError(data.error)
      }
    } catch (err) {
      console.error("Error collecting rewards:", err)
      setError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥")
    } finally {
      setCollecting(false)
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  const formatTime = (ms) => {
    if (!ms) return "00:00:00"
    const hours = Math.floor(ms / (1000 * 60 * 60))
    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60))
    const seconds = Math.floor((ms % (1000 * 60)) / 1000)
    return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å 2 –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const formatNumber = (num) => {
    return Number.parseFloat(num).toFixed(2)
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  const calculateProgress = () => {
    if (!miningProgress) return 0
    return miningProgress.collection_progress || 0
  }

  if (loading) {
    return (
      <div className="bg-[#0F1729]/90 p-4 rounded-xl">
        <div className="flex justify-center">
          <div className="w-5 h-5 border-2 border-blue-500/30 border-t-blue-500 rounded-full animate-spin" />
        </div>
      </div>
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤
  if (!miningProgress || miningProgress.hashrate <= 0) {
    return (
      <div className="bg-[#0F1729]/90 p-4 rounded-xl">
        <div className="text-sm text-gray-400">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤</div>
      </div>
    )
  }

  return (
    <div className="space-y-2">
      {/* –°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥ */}
      <div className="bg-[#0F1729]/90 p-3 rounded-xl">
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2">
            <Coins className="text-yellow-500" size={16} />
            <span className="text-white">–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥</span>
          </div>
          <div className="flex items-center gap-2">
            {timeLeft > 0 && !miningProgress.has_pass && !miningProgress.allow_anytime_collection && (
              <span className="text-orange-400 font-medium">{formatTime(timeLeft)}</span>
            )}
          </div>
        </div>

        {/* –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å–±–æ—Ä–∞ */}
        <div className="mb-2">
          <div
            className="flex items-center justify-between bg-gray-800/50 p-2 rounded-lg cursor-pointer"
            onClick={() => setShowPeriods(!showPeriods)}
          >
            <div className="flex items-center gap-2">
              <Clock size={14} className="text-blue-400" />
              <span className="text-sm text-gray-300">
                {selectedPeriod ? `–ü–µ—Ä–∏–æ–¥: ${selectedPeriod.period} —á` : "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥"}
              </span>
            </div>
            <div className="flex items-center gap-2">
              {selectedPeriod && <span className="text-sm text-green-400">+{selectedPeriod.amount} üíé</span>}
              {showPeriods ? (
                <ChevronUp size={16} className="text-gray-400" />
              ) : (
                <ChevronDown size={16} className="text-gray-400" />
              )}
            </div>
          </div>

          {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ */}
          {showPeriods && rewards.length > 0 && (
            <div className="mt-1 bg-gray-800/30 rounded-lg overflow-hidden">
              {rewards.map((reward, index) => (
                <div
                  key={index}
                  className={`flex items-center justify-between p-2 cursor-pointer hover:bg-gray-800/70 ${
                    selectedPeriod?.period === reward.period ? "bg-gray-800/70" : ""
                  }`}
                  onClick={() => {
                    setSelectedPeriod(reward)
                    setShowPeriods(false)
                  }}
                >
                  <div className="flex items-center gap-2">
                    <Clock size={14} className="text-blue-400" />
                    <span className="text-sm text-gray-300">{reward.period} —á</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-green-400">+{reward.amount} üíé</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ */}
        <button
          onClick={handleCollect}
          disabled={
            collecting ||
            (timeLeft > 0 && !miningProgress.has_pass && !miningProgress.allow_anytime_collection) ||
            !selectedPeriod
          }
          className="w-full py-2 rounded-lg text-sm font-medium transition-all
            bg-gradient-to-r from-blue-600 to-blue-500 text-white hover:from-blue-500 hover:to-blue-400
            disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {collecting ? "–°–±–æ—Ä..." : "–°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã"}
        </button>
      </div>

      {/* –ë–∞–ª–∞–Ω—Å */}
      <div className="bg-[#0F1729]/90 p-3 rounded-xl space-y-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-1">
            <span className="text-gray-400">–ë–∞–ª–∞–Ω—Å:</span>
            <span className="text-white">{Number(balance).toFixed(2)}</span>
            <span className="text-blue-400">üíé</span>
          </div>
          <div className="flex items-center gap-1">
            <span className="text-gray-400">+</span>
            <span className="text-green-400">{formatNumber(miningProgress.mined_amount)}</span>
            <span className="text-blue-400">üíé</span>
          </div>
        </div>
        <div className="h-0.5 w-full bg-gray-800 rounded-full overflow-hidden">
          <div
            className="h-full bg-gradient-to-r from-blue-600 to-blue-400 transition-all duration-1000"
            style={{ width: `${calculateProgress()}%` }}
          />
        </div>
      </div>

      {/* –ü—É–ª */}
      <div className="bg-[#0F1729]/90 p-3 rounded-xl">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-1.5">
            <span className="text-blue-400">‚äü</span>
            <span className="text-white">–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—É–ª–∞:</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-blue-400">{miningProgress.pool_multiplier}x</span>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="space-y-1">
        {/* –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ */}
        <div className="bg-[#0F1729]/90 p-2.5 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-1.5">
              <span className="text-green-500">‚Üó</span>
              <span className="text-gray-400">–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:</span>
              <span className="text-white">{formatNumber(miningProgress.total_mined)}</span>
              <span className="text-blue-400">üíé</span>
            </div>
          </div>
        </div>

        {/* –•–µ—à—Ä–µ–π—Ç */}
        <div className="bg-[#0F1729]/90 p-2.5 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-1.5">
              <span className="text-blue-400">‚ö°</span>
              <span className="text-gray-400">–•–µ—à—Ä–µ–π—Ç:</span>
              <span className="text-white">{formatNumber(miningProgress.hashrate)}</span>
              <span className="text-gray-400">H/s</span>
            </div>
          </div>
        </div>

        {/* –î–æ—Ö–æ–¥ –≤ —á–∞—Å */}
        <div className="bg-[#0F1729]/90 p-2.5 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-1.5">
              <span className="text-yellow-500">üí∞</span>
              <span className="text-gray-400">–î–æ—Ö–æ–¥ –≤ —á–∞—Å:</span>
              <span className="text-white">
                {formatNumber(miningProgress.hashrate * miningProgress.pool_multiplier * 0.5)}
              </span>
              <span className="text-blue-400">üíé/—á–∞—Å</span>
            </div>
          </div>
        </div>
      </div>

      {error && <div className="text-sm text-red-400 text-center mt-2">{error}</div>}
    </div>
  )
}

export default MiningRewardsNew

