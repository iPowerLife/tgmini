"use client"

import { useState, useEffect } from "react"
import { supabase } from "../supabase"

export function MinersModal({ onClose, user }) {
  const [miners, setMiners] = useState([])
  const [loading, setLoading] = useState(true)
  const [selectedMiner, setSelectedMiner] = useState(null)
  const [activeMiner, setActiveMiner] = useState(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–π–Ω–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–º –º–∞–π–Ω–µ—Ä–µ
  useEffect(() => {
    const fetchMiners = async () => {
      try {
        setLoading(true)

        if (!user?.id) {
          setLoading(false)
          return
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.id)

        // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_miners —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ miner_models
        const { data: userMiners, error: minersError } = await supabase
          .from("user_miners")
          .select(`
    id,
    user_id,
    model_id,
    miner_models (
      id,
      name,
      display_name,
      mining_power,
      energy_consumption,
      image_url
    )
  `)
          .eq("user_id", user.id)

        if (minersError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ user_miners:", minersError)
          throw minersError
        }

        console.log("–î–∞–Ω–Ω—ã–µ user_miners:", userMiners)

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤
        const formattedMiners = userMiners
          ? userMiners.map((item) => ({
              id: item.id,
              modelId: item.model_id,
              level: 1, // Default level since the column doesn't exist
              name: item.miner_models?.display_name || "–ú–∞–π–Ω–µ—Ä",
              power: calculatePower(item.miner_models?.mining_power || 10, 1), // Using default level 1
              energy: calculateEnergy(item.miner_models?.energy_consumption || 5, 1), // Using default level 1
              image: item.miner_models?.image_url || "‚öíÔ∏è",
              rarity: getRarityFromPower(item.miner_models?.mining_power || 10),
            }))
          : []

        setMiners(formattedMiners)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–µ—Ä
        if (user.active_miner_id) {
          setActiveMiner(user.active_miner_id)

          // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–π–Ω–µ—Ä –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
          const active = formattedMiners.find((m) => m.id === user.active_miner_id)
          if (active) {
            setSelectedMiner(active)
          }
        }

        setLoading(false)
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–π–Ω–µ—Ä–æ–≤:", err)

        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const testMiners = [
          {
            id: 1,
            modelId: 1,
            name: "–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä",
            power: 10,
            level: 1,
            energy: 5,
            rarity: "common",
          },
          {
            id: 2,
            modelId: 2,
            name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–π–Ω–µ—Ä",
            power: 25,
            level: 2,
            energy: 12,
            rarity: "rare",
          },
        ]

        setMiners(testMiners)
        setLoading(false)
      }
    }

    fetchMiners()
  }, [user])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞ –ø–æ –µ–≥–æ –º–æ—â–Ω–æ—Å—Ç–∏
  const getRarityFromPower = (power) => {
    if (power <= 15) return "common"
    if (power <= 30) return "rare"
    if (power <= 50) return "epic"
    return "legendary"
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
  const calculatePower = (basePower, level) => {
    return Math.round(basePower * (1 + (level - 1) * 0.15))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
  const calculateEnergy = (baseEnergy, level) => {
    return Math.round(baseEnergy * (1 + (level - 1) * 0.1))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–π–Ω–µ—Ä–∞
  const handleSelectMiner = (miner) => {
    setSelectedMiner(miner)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–∞
  const activateMiner = async (minerId) => {
    try {
      console.log("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞–π–Ω–µ—Ä–∞:", minerId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–π–Ω–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase.from("users").update({ active_miner_id: minerId }).eq("id", user.id)

      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ active_miner_id:", error)
        throw error
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setActiveMiner(minerId)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert("–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–∞:", error)
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞–π–Ω–µ—Ä")
    }
  }

  const upgradeMiner = async (minerId) => {
    try {
      console.log("–£–ª—É—á—à–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞:", minerId)

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–π–Ω–µ—Ä
      const miner = miners.find((m) => m.id === minerId)
      if (!miner) return

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
      const upgradeCost = Math.round(100 * Math.pow(1.5, miner.level - 1))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
      if (user.balance < upgradeCost) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è ${upgradeCost} üíé`)
        return
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: balanceError } = await supabase
        .from("users")
        .update({ balance: user.balance - upgradeCost })
        .eq("id", user.id)

      if (balanceError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", balanceError)
        throw balanceError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞
      setMiners(
        miners.map((m) => {
          if (m.id === minerId) {
            const newLevel = m.level + 1
            return {
              ...m,
              level: newLevel,
              power: calculatePower(m.power / calculatePower(1, m.level), newLevel),
              energy: calculateEnergy(m.energy / calculateEnergy(1, m.level), newLevel),
            }
          }
          return m
        }),
      )

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert(`–ú–∞–π–Ω–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è ${miner.level + 1}!`)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–∞:", error)
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –º–∞–π–Ω–µ—Ä")
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
  const getRarityColor = (rarity) => {
    switch (rarity) {
      case "common":
        return "blue"
      case "rare":
        return "purple"
      case "epic":
        return "orange"
      case "legendary":
        return "yellow"
      default:
        return "blue"
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-[#242838]/95 backdrop-blur-sm p-4 rounded-lg w-[90%] max-w-md border border-blue-500/20">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-bold text-blue-400">–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã</h3>
          <button className="text-gray-400 hover:text-white transition-colors" onClick={onClose}>
            ‚úï
          </button>
        </div>

        {loading ? (
          <div className="flex justify-center items-center py-8">
            <div className="w-8 h-8 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
          </div>
        ) : miners.length === 0 ? (
          <div className="text-center py-8 text-gray-400">
            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤</p>
            <button
              className="mt-4 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors"
              onClick={() => {
                onClose()
                window.location.href = "/shop"
              }}
            >
              –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä—ã
            </button>
          </div>
        ) : (
          <div className="space-y-3 max-h-[60vh] overflow-y-auto pr-1 custom-scrollbar">
            {miners.map((miner) => (
              <div
                key={miner.id}
                className={`p-3 rounded-lg border transition-all cursor-pointer ${
                  selectedMiner?.id === miner.id
                    ? "bg-blue-500/20 border-blue-500"
                    : "bg-[#1a1d2d] border-[#2a2f45] hover:border-blue-500/50"
                }`}
                onClick={() => handleSelectMiner(miner)}
              >
                <div className="flex items-center">
                  <div
                    className={`w-12 h-12 bg-${getRarityColor(miner.rarity)}-500/20 rounded-lg flex items-center justify-center mr-3`}
                  >
                    {/* –ò–∫–æ–Ω–∫–∞ –º–∞–π–Ω–µ—Ä–∞ */}
                    {typeof miner.image === "string" && miner.image.startsWith("http") ? (
                      <img
                        src={miner.image || "/placeholder.svg"}
                        alt={miner.name}
                        className="w-10 h-10 object-contain"
                      />
                    ) : (
                      <span className="text-2xl">{miner.image || "‚öíÔ∏è"}</span>
                    )}
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-white">{miner.name}</h4>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-400">
                        –ú–æ—â–Ω–æ—Å—Ç—å: <span className="text-blue-400">{miner.power} H/s</span>
                      </span>
                      <span className="text-gray-400">
                        –£—Ä–æ–≤–µ–Ω—å: <span className="text-blue-400">{miner.level}</span>
                      </span>
                    </div>
                  </div>

                  {activeMiner === miner.id && (
                    <div className="ml-2 px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs">–ê–∫—Ç–∏–≤–µ–Ω</div>
                  )}
                </div>

                {selectedMiner?.id === miner.id && (
                  <div className="mt-3 pt-3 border-t border-blue-500/30">
                    <div className="text-sm text-gray-400 space-y-1">
                      <p>
                        –î–æ—Ö–æ–¥: <span className="text-blue-400">{Math.round(miner.power * 0.1 * 100) / 100} üíé/—á–∞—Å</span>
                      </p>
                      <p>
                        –≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <span className="text-blue-400">{miner.energy}/—á–∞—Å</span>
                      </p>
                      <p>
                        –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:{" "}
                        <span className="text-blue-400">{Math.round(100 * Math.pow(1.5, miner.level - 1))} üíé</span>
                      </p>
                    </div>
                    <div className="mt-3 flex space-x-2">
                      <button
                        className={`flex-1 ${
                          activeMiner === miner.id ? "bg-gray-500 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-600"
                        } text-white py-1.5 px-3 rounded-lg text-sm transition-colors`}
                        onClick={() => activeMiner !== miner.id && activateMiner(miner.id)}
                        disabled={activeMiner === miner.id}
                      >
                        {activeMiner === miner.id ? "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}
                      </button>
                      <button
                        className="bg-[#2a2f45] hover:bg-[#353b58] text-gray-300 py-1.5 px-3 rounded-lg text-sm transition-colors"
                        onClick={() => upgradeMiner(miner.id)}
                      >
                        –£–ª—É—á—à–∏—Ç—å
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        <style jsx>{`
          .custom-scrollbar::-webkit-scrollbar {
            width: 4px;
          }
          .custom-scrollbar::-webkit-scrollbar-track {
            background: #1a1d2d;
            border-radius: 10px;
          }
          .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #3b82f6;
            border-radius: 10px;
          }
        `}</style>
      </div>
    </div>
  )
}

