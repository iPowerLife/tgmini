"use client"

import { useState, useEffect, useCallback, useRef } from "react"
import { Trophy, Users, Award, Crown, Star, Sparkles } from "lucide-react"
import { supabase } from "../supabase"
import { useTelegramUser } from "../hooks/use-telegram-user"
import {
  shouldUpdateCache,
  getCachedRating,
  cacheRating,
  getLastUpdateTime,
  clearRatingCache,
} from "../utils/cache-manager"

export function RatingSection() {
  const [activeTab, setActiveTab] = useState("balance")
  const [sortedUsers, setSortedUsers] = useState([])
  const [error, setError] = useState(null)
  const [lastUpdateTime, setLastUpdateTime] = useState("–ó–∞–≥—Ä—É–∑–∫–∞...")
  const maxUsers = 100
  const containerRef = useRef(null)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const telegramUser = useTelegramUser()
  const currentUserId = telegramUser?.id || null

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—á–∏—â–∞–µ–º –∫—ç—à, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    clearRatingCache()
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    async function fetchUsers() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        const shouldUpdate = shouldUpdateCache()
        const cachedData = getCachedRating(activeTab)

        // –ï—Å–ª–∏ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (!shouldUpdate && cachedData) {
          setSortedUsers(cachedData)
          setLastUpdateTime(getLastUpdateTime())
          return
        }

        // –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let query

        if (activeTab === "balance") {
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, balance, level")
            .order("balance", { ascending: false })
            .limit(maxUsers)
        } else {
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, referral_count, level")
            .order("referral_count", { ascending: false })
            .limit(maxUsers)
        }

        const { data, error: supabaseError } = await query

        if (supabaseError) {
          throw supabaseError
        }

        if (!data) {
          throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const processedData = data.map((user) => {
          const displayName = getUserDisplayName(user)

          return {
            id: user.telegram_id || user.id,
            display_name: displayName,
            photo_url: user.photo_url,
            balance: user.balance || 0,
            referral_count: user.referral_count || 0,
            level: user.level || 1,
          }
        })

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        cacheRating(activeTab, processedData)

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        setSortedUsers(processedData)
        setLastUpdateTime(getLastUpdateTime())
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", err)
        setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
      }
    }

    fetchUsers()
  }, [activeTab])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function getUserDisplayName(user) {
    if (!user) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    if (user.first_name) {
      return user.first_name
    }

    if (user.username) {
      return user.username.replace("@", "")
    }

    return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id || user.id}`
  }

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
  const findUserRealPosition = useCallback(() => {
    if (!currentUserId || sortedUsers.length === 0) return null

    const position = sortedUsers.findIndex((user) => String(user.id) === String(currentUserId)) + 1
    return position > 0 ? position : null
  }, [sortedUsers, currentUserId])

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentUserPosition = findUserRealPosition()

  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const getMetricIcon = () => {
    switch (activeTab) {
      case "balance":
        return "üí∞"
      case "referrals":
        return "üë•"
      default:
        return "üí∞"
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getMetricValue = (user) => {
    if (!user) return "0"
    switch (activeTab) {
      case "balance":
        return (user.balance || 0).toFixed(2)
      case "referrals":
        return user.referral_count || 0
      default:
        return (user.balance || 0).toFixed(2)
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ç–æ–ø-–ø–æ–∑–∏—Ü–∏–π
  const getPositionColor = (index) => {
    if (index === 0) return "from-yellow-400 to-amber-300"
    if (index === 1) return "from-gray-300 to-gray-400"
    if (index === 2) return "from-amber-600 to-amber-500"
    return "from-blue-600/20 to-purple-600/20"
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–æ–ø-–ø–æ–∑–∏—Ü–∏–π
  const getPositionIcon = (index) => {
    if (index === 0) return <Crown className="w-4 h-4 text-yellow-400" />
    if (index === 1) return <Star className="w-4 h-4 text-gray-300" />
    if (index === 2) return <Award className="w-4 h-4 text-amber-600" />
    return null
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentUser = currentUserId ? sortedUsers.find((user) => String(user.id) === String(currentUserId)) : null

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ –≤ —Ç–æ–ø-100
  const lastTopUser = sortedUsers.length > 0 ? sortedUsers[sortedUsers.length - 1] : null

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  return (
    <div className="min-h-screen pb-12">
      <div className="px-4 py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-6 bg-[#1E2235] p-4 rounded-xl shadow-lg">
          <h1 className="text-2xl font-bold text-white mb-1">–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h1>
          <div className="text-[#5B9CE6] text-sm font-medium">
            {activeTab === "balance" ? "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç" : "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
          <div className="flex items-center mt-2 text-xs">
            <div className="text-gray-400">–û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdateTime}</div>
            <div className="text-[#5B9CE6] ml-2">(–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤)</div>
          </div>
        </div>

        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex gap-2 mb-4 bg-[#1E2235] p-1 rounded-xl shadow-lg">
          <button
            onClick={() => setActiveTab("balance")}
            className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium text-sm transition-all flex-1 ${
              activeTab === "balance" ? "bg-[#5B9CE6] text-white" : "text-gray-400 hover:bg-[#2B2D35]"
            }`}
          >
            <Trophy className="w-4 h-4" />
            <span>–ü–æ –±–∞–ª–∞–Ω—Å—É</span>
          </button>

          <button
            onClick={() => setActiveTab("referrals")}
            className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium text-sm transition-all flex-1 ${
              activeTab === "referrals" ? "bg-[#5B9CE6] text-white" : "text-gray-400 hover:bg-[#2B2D35]"
            }`}
          >
            <Users className="w-4 h-4" />
            <span>–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º</span>
          </button>
        </div>

        {/* –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {currentUserPosition && currentUserPosition > 0 && currentUser && (
          <div className="relative overflow-hidden rounded-xl mb-3 group bg-[#1E2235] shadow-lg">
            <div className="relative z-10 p-3">
              <div className="text-xs text-blue-300 mb-0.5 flex items-center">
                <Sparkles className="w-3 h-3 mr-1 animate-pulse" />
                <span>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="text-lg font-bold text-white">{currentUserPosition} –º–µ—Å—Ç–æ</div>
                  <div className="ml-1 text-xs text-gray-400">–∏–∑ {sortedUsers.length}</div>
                </div>
                <div className="flex items-center bg-blue-900/50 px-2 py-1 rounded-full border border-blue-500/30">
                  <span className="text-sm text-white font-medium">{getMetricValue(currentUser)}</span>
                  <span className="ml-1 text-blue-300">{getMetricIcon()}</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <div className="bg-[#1E2235] rounded-xl overflow-hidden mb-3 shadow-lg">
          {error ? (
            <div className="p-6 text-center">
              <div className="text-red-400 mb-2">{error}</div>
            </div>
          ) : sortedUsers.length > 0 ? (
            <div ref={containerRef} className="max-h-[70vh] overflow-y-auto scrollbar-hide">
              <div className="divide-y divide-gray-700/30">
                {sortedUsers.map((user, index) => {
                  const isTopThree = index < 3
                  const isCurrentUser = currentUserId && String(user.id) === String(currentUserId)

                  return (
                    <div
                      key={user.id}
                      className={`relative flex items-center p-2 ${
                        isCurrentUser
                          ? "bg-blue-900/20 border-l-2 border-blue-500"
                          : isTopThree
                            ? `bg-gradient-to-r from-gray-800/50 to-gray-900/50`
                            : "hover:bg-gray-800/30"
                      }`}
                    >
                      {/* –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è —Ç–æ–ø-3 */}
                      {isTopThree && (
                        <div
                          className={`absolute inset-0 bg-gradient-to-r ${getPositionColor(index)} opacity-10`}
                        ></div>
                      )}

                      {/* –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ */}
                      <div
                        className={`relative flex-shrink-0 w-6 h-6 flex items-center justify-center rounded-full font-bold ${
                          isTopThree ? "bg-gradient-to-r " + getPositionColor(index) : "bg-gray-800"
                        } text-white text-xs`}
                      >
                        {index + 1}
                      </div>

                      {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                      <div className="flex-shrink-0 ml-2 relative">
                        {user.photo_url ? (
                          <div className="relative">
                            <img
                              src={user.photo_url || "/placeholder.svg?height=32&width=32"}
                              alt={user.display_name}
                              className={`w-8 h-8 rounded-full object-cover border-2 ${
                                index === 0
                                  ? "border-yellow-400"
                                  : index === 1
                                    ? "border-gray-300"
                                    : index === 2
                                      ? "border-amber-600"
                                      : "border-transparent"
                              }`}
                            />
                          </div>
                        ) : (
                          <div
                            className={`w-8 h-8 rounded-full bg-gray-700 flex items-center justify-center border-2 ${
                              index === 0
                                ? "border-yellow-400"
                                : index === 1
                                  ? "border-gray-300"
                                  : index === 2
                                    ? "border-amber-600"
                                    : "border-transparent"
                            }`}
                          >
                            <span className="text-sm font-bold text-gray-300">{user.display_name?.[0] || "?"}</span>
                          </div>
                        )}

                        {isTopThree && (
                          <div className="absolute -top-1 -right-1 w-4 h-4 rounded-full flex items-center justify-center text-xs font-bold">
                            {index === 0 && <span className="text-yellow-400">ü•á</span>}
                            {index === 1 && <span className="text-gray-300">ü•à</span>}
                            {index === 2 && <span className="text-amber-600">ü•â</span>}
                          </div>
                        )}
                      </div>

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
                      <div className="ml-2 flex-1 min-w-0">
                        <div className="font-medium text-white flex items-center text-sm truncate">
                          {user.display_name}
                        </div>
                        <div className="text-xs text-gray-400 flex items-center">
                          <span className="mr-1">{getMetricValue(user)}</span>
                          <span>{getMetricIcon()}</span>
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>
          ) : (
            <div className="p-4 text-center text-gray-400 text-sm">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
          )}
        </div>

        {/* –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ç–æ–ø-100 */}
        {currentUser && currentUserPosition === null && lastTopUser && (
          <div className="bg-[#1E2235] rounded-xl p-3 shadow-lg">
            <div className="text-center">
              <div className="text-xs text-gray-400 mb-1">–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
              <div className="text-lg font-bold text-white mb-0.5">–ù–∏–∂–µ —Ç–æ–ø-100</div>
              <div className="text-xs text-blue-400">
                –í–∞–º –Ω—É–∂–Ω–æ{" "}
                {activeTab === "balance"
                  ? `–Ω–∞–±—Ä–∞—Ç—å –µ—â–µ ${(lastTopUser.balance || 0) - (currentUser.balance || 0)} –º–æ–Ω–µ—Ç`
                  : `–ø—Ä–∏–≤–ª–µ—á—å –µ—â–µ ${(lastTopUser.referral_count || 0) - (currentUser.referral_count || 0)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`}
                , —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø-100
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

