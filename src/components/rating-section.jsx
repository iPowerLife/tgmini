"use client"

import { useState, useEffect, useCallback, useMemo } from "react"
import { motion } from "framer-motion"
import { supabase } from "../supabase"
import { useTelegramUser } from "../hooks/use-telegram-user"
import { useCachedData } from "../hooks/use-cached-data"
import { OptimizedImage } from "./optimized-image"

// –¢–∏–ø—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
const RATING_TYPES = {
  MINING: "mining",
  REFERRALS: "referrals",
  LEVEL: "level",
  TASKS: "tasks",
}

// –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
const RATING_LABELS = {
  [RATING_TYPES.MINING]: "–ú–∞–π–Ω–∏–Ω–≥",
  [RATING_TYPES.REFERRALS]: "–†–µ—Ñ–µ—Ä–∞–ª—ã",
  [RATING_TYPES.LEVEL]: "–£—Ä–æ–≤–µ–Ω—å",
  [RATING_TYPES.TASKS]: "–ó–∞–¥–∞–Ω–∏—è",
}

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
const RATING_ICONS = {
  [RATING_TYPES.MINING]: "‚õèÔ∏è",
  [RATING_TYPES.REFERRALS]: "üë•",
  [RATING_TYPES.LEVEL]: "üèÜ",
  [RATING_TYPES.TASKS]: "‚úÖ",
}

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–æ–ø-3 –ø–æ–∑–∏—Ü–∏–π
const POSITION_COLORS = ["#FFD700", "#C0C0C0", "#CD7F32"]

// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const ITEMS_PER_PAGE = 20

const RatingSection = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeRatingType, setActiveRatingType] = useState(RATING_TYPES.MINING)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const [showMyPosition, setShowMyPosition] = useState(false)
  const [animateItems, setAnimateItems] = useState(false)
  const [currentPage, setCurrentPage] = useState(0)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const { user: telegramUser } = useTelegramUser()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞
  const {
    data: ratingData,
    isLoading: isDataLoading,
    error: dataError,
    mutate,
  } = useCachedData(`ratings_${activeRatingType}`, () => fetchRatingData(activeRatingType), {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    refreshInterval: 60000, // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  })

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentUserPosition = useMemo(() => {
    if (!ratingData || !telegramUser) return null

    const index = ratingData.findIndex((item) => item.telegram_id === telegramUser.id || item.id === telegramUser.id)

    return index !== -1 ? { ...ratingData[index], position: index + 1 } : null
  }, [ratingData, telegramUser])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ Supabase
  const fetchRatingData = useCallback(async (type) => {
    try {
      setIsLoading(true)
      setError(null)

      let query

      switch (type) {
        case RATING_TYPES.MINING:
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, mining_power, level")
            .order("mining_power", { ascending: false })
            .limit(100)
          break

        case RATING_TYPES.REFERRALS:
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, referral_count, level")
            .order("referral_count", { ascending: false })
            .limit(100)
          break

        case RATING_TYPES.LEVEL:
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, level, experience")
            .order("level", { ascending: false })
            .order("experience", { ascending: false })
            .limit(100)
          break

        case RATING_TYPES.TASKS:
          // –î–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
          query = supabase
            .from("user_tasks")
            .select("user_id, users:user_id(id, telegram_id, username, first_name, last_name, photo_url, level)")
            .eq("status", "completed")
            .limit(500)
          break

        default:
          query = supabase
            .from("users")
            .select("id, telegram_id, username, first_name, last_name, photo_url, mining_power, level")
            .order("mining_power", { ascending: false })
            .limit(100)
      }

      const { data, error } = await query

      if (error) throw error

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
      if (type === RATING_TYPES.TASKS) {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const userTasksCount = data.reduce((acc, item) => {
          const userId = item.user_id
          if (!acc[userId]) {
            acc[userId] = {
              ...item.users,
              tasks_completed: 1,
            }
          } else {
            acc[userId].tasks_completed += 1
          }
          return acc
        }, {})

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        const processedData = Object.values(userTasksCount).sort((a, b) => b.tasks_completed - a.tasks_completed)

        return processedData
      }

      return data
    } catch (err) {
      setError(err.message)
      console.error("Error fetching rating data:", err)
      return []
    } finally {
      setIsLoading(false)
    }
  }, [])

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
  useEffect(() => {
    mutate()
    setCurrentPage(0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞

    // –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
    setAnimateItems(false)
    const timer = setTimeout(() => {
      setAnimateItems(true)
    }, 300)

    return () => clearTimeout(timer)
  }, [mutate])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const getRatingValue = (item) => {
    switch (activeRatingType) {
      case RATING_TYPES.MINING:
        return `${item.mining_power || 0} ‚ö°`
      case RATING_TYPES.REFERRALS:
        return `${item.referral_count || 0} üë•`
      case RATING_TYPES.LEVEL:
        return `–£—Ä. ${item.level || 1}`
      case RATING_TYPES.TASKS:
        return `${item.tasks_completed || 0} ‚úÖ`
      default:
        return `${item.mining_power || 0} ‚ö°`
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserName = (item) => {
    if (item.username) return `@${item.username}`
    if (item.first_name) {
      return item.last_name ? `${item.first_name} ${item.last_name}` : item.first_name
    }
    return `User ${item.telegram_id}`
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const handleSendGift = (userId) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞
    alert(`–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const scrollToCurrentUser = () => {
    if (!currentUserPosition) return

    const index = ratingData.findIndex((item) => item.telegram_id === telegramUser.id || item.id === telegramUser.id)

    if (index !== -1) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const userPage = Math.floor(index / ITEMS_PER_PAGE)
      setCurrentPage(userPage)
      setShowMyPosition(true)

      // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowMyPosition(false)
      }, 3000)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const handleRatingTypeChange = (type) => {
    setActiveRatingType(type)
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const currentPageData = useMemo(() => {
    if (!ratingData) return []
    const startIndex = currentPage * ITEMS_PER_PAGE
    return ratingData.slice(startIndex, startIndex + ITEMS_PER_PAGE)
  }, [ratingData, currentPage])

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
  const totalPages = useMemo(() => {
    if (!ratingData) return 0
    return Math.ceil(ratingData.length / ITEMS_PER_PAGE)
  }, [ratingData])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const goToNextPage = () => {
    if (currentPage < totalPages - 1) {
      setCurrentPage(currentPage + 1)
    }
  }

  const goToPrevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1)
    }
  }

  return (
    <div className="rating-section">
      <div className="rating-header">
        <h2 className="rating-title">–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤</h2>

        {/* –§–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞ */}
        <div className="rating-filters">
          {Object.values(RATING_TYPES).map((type) => (
            <button
              key={type}
              className={`rating-filter-btn ${activeRatingType === type ? "active" : ""}`}
              onClick={() => handleRatingTypeChange(type)}
            >
              <span className="rating-filter-icon">{RATING_ICONS[type]}</span>
              <span className="rating-filter-label">{RATING_LABELS[type]}</span>
            </button>
          ))}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {currentUserPosition && (
        <button className="find-me-btn" onClick={scrollToCurrentUser}>
          –ú–æ—è –ø–æ–∑–∏—Ü–∏—è ({currentUserPosition.position})
        </button>
      )}

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="loading-state">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</p>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div className="error-state">
          <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞</p>
          <button onClick={() => mutate()}>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */}
      {!isLoading && !error && ratingData && (
        <div className="rating-list-container">
          {currentPageData.map((item, index) => {
            const position = currentPage * ITEMS_PER_PAGE + index + 1
            const isCurrentUser = telegramUser && (item.telegram_id === telegramUser.id || item.id === telegramUser.id)

            return (
              <motion.div
                key={`${item.id || item.telegram_id}-${position}`}
                className={`rating-item ${isCurrentUser ? "current-user" : ""} ${showMyPosition && isCurrentUser ? "highlight-position" : ""}`}
                initial={animateItems ? { opacity: 0, y: 20 } : false}
                animate={{ opacity: 1, y: 0 }}
                transition={{
                  duration: 0.3,
                  delay: index * 0.05,
                  ease: "easeOut",
                }}
              >
                {/* –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ */}
                <div
                  className="position"
                  style={{
                    backgroundColor: position <= 3 ? POSITION_COLORS[position - 1] : undefined,
                  }}
                >
                  {position}
                </div>

                {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                <div className="user-avatar">
                  <OptimizedImage
                    src={item.photo_url || "/placeholder.svg?height=40&width=40"}
                    alt={getUserName(item)}
                    width={40}
                    height={40}
                    className="avatar-image"
                  />
                  {position <= 3 && (
                    <div className="position-badge">{position === 1 ? "ü•á" : position === 2 ? "ü•à" : "ü•â"}</div>
                  )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
                <div className="user-info">
                  <span className="username">{getUserName(item)}</span>
                  <span className="user-level">–£—Ä–æ–≤–µ–Ω—å {item.level || 1}</span>
                </div>

                {/* –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ */}
                <div className="rating-value">{getRatingValue(item)}</div>

                {/* –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */}
                <div className="user-actions">
                  {!isCurrentUser && (
                    <button
                      className="gift-button"
                      onClick={() => handleSendGift(item.id || item.telegram_id)}
                      aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
                    >
                      üéÅ
                    </button>
                  )}
                </div>
              </motion.div>
            )
          })}

          {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
          {totalPages > 1 && (
            <div className="pagination">
              <button className="pagination-btn" onClick={goToPrevPage} disabled={currentPage === 0}>
                &laquo; –ù–∞–∑–∞–¥
              </button>
              <span className="pagination-info">
                {currentPage + 1} –∏–∑ {totalPages}
              </span>
              <button className="pagination-btn" onClick={goToNextPage} disabled={currentPage === totalPages - 1}>
                –í–ø–µ—Ä–µ–¥ &raquo;
              </button>
            </div>
          )}
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      {currentUserPosition && (
        <div className="current-user-info">
          <div className="user-position">
            <span>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</span>
            <span className="position-value">{currentUserPosition.position}</span>
          </div>
          <div className="next-position-info">
            {currentUserPosition.position > 1 && (
              <>
                <span>–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏:</span>
                <span className="next-position-value">
                  {activeRatingType === RATING_TYPES.MINING &&
                    `${(ratingData[currentUserPosition.position - 2]?.mining_power || 0) - currentUserPosition.mining_power} ‚ö°`}
                  {activeRatingType === RATING_TYPES.REFERRALS &&
                    `${(ratingData[currentUserPosition.position - 2]?.referral_count || 0) - currentUserPosition.referral_count} üë•`}
                  {activeRatingType === RATING_TYPES.LEVEL &&
                    `${(ratingData[currentUserPosition.position - 2]?.level || 0) - currentUserPosition.level} —É—Ä–æ–≤–Ω–µ–π`}
                  {activeRatingType === RATING_TYPES.TASKS &&
                    `${(ratingData[currentUserPosition.position - 2]?.tasks_completed || 0) - currentUserPosition.tasks_completed} –∑–∞–¥–∞–Ω–∏–π`}
                </span>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default RatingSection

