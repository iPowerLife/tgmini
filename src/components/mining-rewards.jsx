"use client"

import { useState, useEffect, useRef } from "react"
import { supabase } from "../supabase"
import { Coins, Clock, ArrowDown, AlertCircle, Cpu, Zap, Wallet, Play } from "lucide-react"

export const MiningRewards = ({ userId, initialData, onBalanceUpdate }) => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
  const [miningState, setMiningState] = useState({
    isMining: false,
    amount: 0,
    remainingSeconds: 0,
    canCollect: false,
    hashrate: 0,
    hourlyRate: 0,
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±–æ—Ä–∞
  const [collecting, setCollecting] = useState(false)

  // Ref –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const timerRef = useRef(null)
  const mountedRef = useRef(true)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
  const formatNumber = (num, decimals = 2) => {
    if (num === undefined || num === null || isNaN(num)) return "0.00"
    return Math.max(0, Number(num)).toFixed(decimals)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds) => {
    if (!seconds || seconds <= 0) return "00:00:00"

    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = Math.floor(seconds % 60)

    return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–π–Ω–∏–Ω–≥–µ
  const fetchMiningData = async () => {
    if (!userId) return

    try {
      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–∞...")

      const { data, error } = await supabase.rpc("get_mining_info_with_rewards", {
        user_id_param: userId,
      })

      if (error) throw error

      console.log("–î–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω—ã:", data)

      if (!mountedRef.current) return

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      setMiningState({
        isMining: data.mining_state.is_mining,
        amount: data.mining_state.is_mining ? data.mining_state.current_amount : data.mining_state.frozen_amount,
        remainingSeconds: data.mining_state.remaining_seconds || 0,
        canCollect: !data.mining_state.is_mining && data.mining_state.frozen_amount > 0,
        hashrate: data.total_hashrate || 0,
        hourlyRate: data.rewards.hourly_rate || 0,
      })

      // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (data.mining_state.is_mining) {
        startLocalTimer(data.mining_state.remaining_seconds, data.rewards.hourly_rate)
      }

      setLoading(false)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–∞:", err)
      if (mountedRef.current) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞")
        setLoading(false)
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  const startLocalTimer = (seconds, rate) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (timerRef.current) {
      clearInterval(timerRef.current)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    timerRef.current = setInterval(() => {
      if (!mountedRef.current) return

      setMiningState((prev) => {
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        if (prev.remainingSeconds <= 1) {
          clearInterval(timerRef.current)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          fetchMiningData()

          return {
            ...prev,
            isMining: false,
            canCollect: true,
            remainingSeconds: 0,
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—É–º–º—É
        return {
          ...prev,
          remainingSeconds: prev.remainingSeconds - 1,
          amount: prev.isMining ? prev.amount + rate / 3600 : prev.amount,
        }
      })
    }, 1000)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  const startMining = async () => {
    try {
      setLoading(true)

      const { data, error } = await supabase.rpc("start_mining", {
        user_id_param: userId,
      })

      if (error) throw error

      console.log("–ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω:", data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await fetchMiningData()
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞–π–Ω–∏–Ω–≥–∞:", err)
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥")
      setLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
  const collectRewards = async () => {
    if (!miningState.canCollect || collecting) return

    try {
      setCollecting(true)

      const { data, error } = await supabase.rpc("collect_mining_rewards", {
        user_id_param: userId,
      })

      if (error) throw error

      console.log("–ù–∞–≥—Ä–∞–¥—ã —Å–æ–±—Ä–∞–Ω—ã:", data)

      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        if (onBalanceUpdate && typeof onBalanceUpdate === "function") {
          onBalanceUpdate(data.new_balance)
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ —Å–Ω–æ–≤–∞
        await startMining()
      } else {
        setError(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã")
        setCollecting(false)
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥")
      setCollecting(false)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    mountedRef.current = true

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    fetchMiningData()

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    const updateInterval = setInterval(() => {
      if (mountedRef.current && !miningState.isMining) {
        fetchMiningData()
      }
    }, 15000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω

    return () => {
      mountedRef.current = false

      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (timerRef.current) clearInterval(timerRef.current)
      clearInterval(updateInterval)
    }
  }, [userId])

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const getProgressPercent = () => {
    const { isMining, remainingSeconds, canCollect } = miningState

    if (!isMining) return canCollect ? 100 : 0

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const duration = 3600

    return Math.floor((1 - remainingSeconds / duration) * 100)
  }

  // –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  const getDailyIncome = () => {
    return miningState.hourlyRate * 24
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  if (loading && !miningState.hashrate) {
    return (
      <div className="bg-[#151B26] p-4 rounded-xl mb-4">
        <div className="flex items-center gap-2 mb-3">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div className="bg-[#1A2234] rounded-lg p-4 flex justify-center">
          <div className="w-6 h-6 border-2 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-[#151B26] p-4 rounded-xl mb-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span className="text-gray-400">–ü—É–ª: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π</span>
          <div className="flex items-center gap-1">
            <span className="text-blue-400">1x</span>
            <span className="text-gray-400">5%</span>
          </div>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
      {error && (
        <div className="bg-red-950/30 border border-red-500/20 rounded-lg p-3 mb-3">
          <div className="flex items-start gap-2">
            <AlertCircle className="text-red-500 shrink-0 mt-0.5" size={16} />
            <div className="text-sm text-red-500/90">{error}</div>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-[#1A2234] rounded-xl overflow-hidden mb-3">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
        <div className="space-y-3 p-4">
          {/* –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Wallet size={16} className="text-green-400" />
              <span>–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(miningState.amount)}</span>
              <span className="text-blue-400">üíé</span>
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Coins size={16} className="text-yellow-400" />
              <span>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(getDailyIncome())}</span>
              <span className="text-blue-400">üíé/–¥–µ–Ω—å</span>
            </div>
          </div>

          {/* –•–µ—à—Ä–µ–π—Ç */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Zap size={16} className="text-purple-400" />
              <span>–•–µ—à—Ä–µ–π—Ç:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(miningState.hashrate)}</span>
              <span className="text-blue-400">H/s</span>
            </div>
          </div>

          {/* –¢–∞–π–º–µ—Ä –º–∞–π–Ω–∏–Ω–≥–∞ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Clock size={16} className="text-orange-400" />
              <span>–í—Ä–µ–º—è –¥–æ —Å–±–æ—Ä–∞:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className={`font-medium ${miningState.canCollect ? "text-green-400" : "text-white"}`}>
                {formatTime(miningState.remainingSeconds)}
              </span>
            </div>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ */}
        <div className="border-t border-gray-800">
          <div className="p-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-1 text-sm text-gray-400">
                <Clock size={14} />
                <span>
                  {miningState.isMining
                    ? "–ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
                    : miningState.canCollect
                      ? "–ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã"
                      : "–ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                </span>
              </div>
              <div className="text-sm text-gray-400">{getProgressPercent()}%</div>
            </div>

            <div className="w-full bg-gray-800 rounded-full h-1.5 mb-3 overflow-hidden">
              <div
                className="h-full rounded-full bg-gradient-to-r from-blue-500 to-blue-400 relative"
                style={{
                  width: `${getProgressPercent()}%`,
                  transition: "width 1s linear",
                }}
              >
                <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
            <button
              onClick={miningState.canCollect ? collectRewards : startMining}
              disabled={miningState.isMining || collecting}
              className={`
                w-full py-2.5 rounded-lg flex items-center justify-center gap-2 font-medium transition-all
                ${
                  miningState.isMining || collecting
                    ? "bg-gray-800 text-gray-400 cursor-not-allowed"
                    : "bg-gradient-to-r from-blue-500 to-blue-400 hover:from-blue-400 hover:to-blue-300 text-white shadow-lg shadow-blue-500/20"
                }
              `}
            >
              {collecting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  <span>–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥...</span>
                </>
              ) : miningState.isMining ? (
                <>
                  <Play size={18} className="animate-pulse" />
                  <span>–ú–∞–π–Ω–∏–Ω–≥</span>
                </>
              ) : miningState.canCollect ? (
                <>
                  <ArrowDown size={18} />
                  <span>–°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã</span>
                </>
              ) : (
                <>
                  <Play size={18} />
                  <span>–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default MiningRewards

