"use client"

import { useState, useEffect, useRef } from "react"
import { supabase } from "../supabase"
import { Coins, Clock, ArrowDown, AlertCircle, CheckCircle2, Cpu, Zap, Calendar, Wallet } from "lucide-react"

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç MiningRewards –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è initialData

// –î–æ–±–∞–≤–ª—è–µ–º initialData –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const MiningRewards = ({ userId, initialData }) => {
  const [loading, setLoading] = useState(!initialData) // –ï—Å–ª–∏ –µ—Å—Ç—å initialData, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  const [collecting, setCollecting] = useState(false)
  const [miningInfo, setMiningInfo] = useState(initialData || null)
  const [error, setError] = useState(null)
  const [success, setSuccess] = useState(null)
  const [lastUpdate, setLastUpdate] = useState(Date.now())
  const intervalRef = useRef(null)
  const isComponentMounted = useRef(true)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!userId) return

    isComponentMounted.current = true

    const loadData = async () => {
      // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å initialData, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (!initialData) {
        setLoading(true)
      }

      try {
        setError(null)

        const { data, error } = await supabase.rpc("get_mining_info_with_rewards", {
          user_id_param: userId,
        })

        if (!isComponentMounted.current) return

        if (error) throw error

        setMiningInfo(data)
      } catch (err) {
        console.error("Error loading mining info:", err)
        if (isComponentMounted.current) {
          setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–∞")
        }
      } finally {
        if (isComponentMounted.current) {
          setLoading(false)
        }
      }
    }

    loadData()

    intervalRef.current = setInterval(() => {
      if (isComponentMounted.current) {
        setLastUpdate(Date.now())
      }
    }, 30000)

    return () => {
      isComponentMounted.current = false
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [userId, lastUpdate, initialData])

  // –°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥
  const collectRewards = async () => {
    if (!userId || collecting) return

    try {
      setCollecting(true)
      setError(null)
      setSuccess(null)

      const { data, error } = await supabase.rpc("collect_mining_rewards", {
        user_id_param: userId,
      })

      if (!isComponentMounted.current) return

      if (error) throw error

      if (data.success) {
        setSuccess(`–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ${data.amount} –º–æ–Ω–µ—Ç!`)
        setLastUpdate(Date.now())
      } else {
        setError(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã")
      }
    } catch (err) {
      console.error("Error collecting rewards:", err)
      if (isComponentMounted.current) {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥")
      }
    } finally {
      if (isComponentMounted.current) {
        setCollecting(false)
      }
    }
  }

  const formatNumber = (num, decimals = 2) => {
    if (num === undefined || num === null || isNaN(num)) return "0.00"
    return Number.parseFloat(num).toFixed(decimals)
  }

  const formatTime = (seconds) => {
    if (!seconds || seconds <= 0) return "–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å"

    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)

    if (hours > 0) {
      return `${hours} —á ${minutes} –º–∏–Ω`
    } else {
      return `${minutes} –º–∏–Ω`
    }
  }

  if (!miningInfo) {
    return (
      <div className="bg-[#0F1729]/90 p-4 rounded-xl mb-4">
        <div className="flex items-center gap-2 mb-3">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div className="bg-[#1A2234] rounded-lg p-4 text-center text-gray-400">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
      </div>
    )
  }

  const { rewards, total_hashrate, pool } = miningInfo
  const canCollect = rewards?.can_collect || false
  const rewardAmount = Number.parseFloat(rewards?.amount || 0)
  const hourlyRate = Number.parseFloat(rewards?.hourly_rate || 0)
  const timeUntilCollection = Number.parseInt(rewards?.time_until_collection || 0)
  const collectionProgress = Number.parseFloat(rewards?.collection_progress || 0)

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å
  const dailyIncome = hourlyRate * 24

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–∞–π–Ω–∏–Ω–≥–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
  const daysInMining = 1

  return (
    <div className="bg-[#0F1729]/90 p-4 rounded-xl mb-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—É–ª–µ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div className="flex items-center gap-2 text-sm">
          <span className="text-gray-400">–ü—É–ª: {pool?.display_name || "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"}</span>
          <div className="flex items-center gap-1">
            <span className="text-blue-400">{pool?.multiplier || 1}x</span>
            <span className="text-gray-400">{pool?.fee_percent || 5}%</span>
          </div>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
      {error && (
        <div className="bg-red-950/30 border border-red-500/20 rounded-lg p-3 mb-3">
          <div className="flex items-start gap-2">
            <AlertCircle className="text-red-500 shrink-0 mt-0.5" size={16} />
            <div className="text-sm text-red-500/90">{error}</div>
          </div>
        </div>
      )}

      {success && (
        <div className="bg-green-950/30 border border-green-500/20 rounded-lg p-3 mb-3">
          <div className="flex items-start gap-2">
            <CheckCircle2 className="text-green-500 shrink-0 mt-0.5" size={16} />
            <div className="text-sm text-green-500/90">{success}</div>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-[#1A2234] rounded-xl overflow-hidden mb-3">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
        <div className="space-y-3 p-4">
          {/* –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Wallet size={16} className="text-green-400" />
              <span>–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(rewardAmount)}</span>
              <span className="text-blue-400">üíé</span>
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Coins size={16} className="text-yellow-400" />
              <span>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(dailyIncome)}</span>
              <span className="text-blue-400">üíé/–¥–µ–Ω—å</span>
            </div>
          </div>

          {/* –•–µ—à—Ä–µ–π—Ç */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Zap size={16} className="text-purple-400" />
              <span>–•–µ—à—Ä–µ–π—Ç:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(total_hashrate)}</span>
              <span className="text-blue-400">H/s</span>
            </div>
          </div>

          {/* –î–Ω–µ–π –≤ –º–∞–π–Ω–∏–Ω–≥–µ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Calendar size={16} className="text-blue-400" />
              <span>–î–Ω–µ–π –≤ –º–∞–π–Ω–∏–Ω–≥–µ:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{daysInMining}</span>
            </div>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ */}
        <div className="border-t border-gray-800">
          <div className="p-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-1 text-sm text-gray-400">
                <Clock size={14} />
                <span>{canCollect ? "–ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å" : `–î–æ —Å–±–æ—Ä–∞: ${formatTime(timeUntilCollection)}`}</span>
              </div>
              <div className="text-sm text-gray-400">{formatNumber(collectionProgress)}%</div>
            </div>

            <div className="w-full bg-gray-800 rounded-full h-1.5 mb-3 overflow-hidden">
              <div
                className="h-full rounded-full bg-gradient-to-r from-blue-500 to-blue-400 relative"
                style={{
                  width: `${Math.min(100, collectionProgress)}%`,
                  transition: "width 0.3s ease-in-out",
                }}
              >
                <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
              </div>
            </div>

            <button
              onClick={collectRewards}
              disabled={!canCollect || collecting || rewardAmount <= 0}
              className={`
                w-full py-2.5 rounded-lg flex items-center justify-center gap-2 font-medium transition-all
                ${
                  canCollect && rewardAmount > 0 && !collecting
                    ? "bg-gradient-to-r from-blue-500 to-blue-400 hover:from-blue-400 hover:to-blue-300 text-white shadow-lg shadow-blue-500/20"
                    : "bg-gray-800 text-gray-400 cursor-not-allowed"
                }
              `}
            >
              {collecting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  <span>–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥...</span>
                </>
              ) : (
                <>
                  <ArrowDown size={18} />
                  <span>–°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default MiningRewards

