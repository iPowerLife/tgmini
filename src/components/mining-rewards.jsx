"use client"

import { useState, useEffect, useRef } from "react"
import { supabase } from "../supabase"
import { Coins, Clock, ArrowDown, AlertCircle, Cpu, Zap, Wallet, Play, ShoppingCart, Info } from "lucide-react"
import { useNavigate } from "react-router-dom"
import { PoolsModal } from "./pools-modal"

export const MiningRewards = ({ userId, onBalanceUpdate }) => {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [hasMiner, setHasMiner] = useState(false)
  const [debugInfo, setDebugInfo] = useState(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [miningState, setMiningState] = useState({
    isMining: false,
    amount: 0,
    remainingSeconds: 0,
    canCollect: false,
    hashrate: 0,
    hourlyRate: 0,
    poolName: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
    poolMultiplier: 1,
    poolFee: 0,
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  const [collecting, setCollecting] = useState(false)
  const [starting, setStarting] = useState(false)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—É–ª–æ–≤
  const [poolsModalOpen, setPoolsModalOpen] = useState(false)
  const [currentPool, setCurrentPool] = useState(null)

  // Ref –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const timerRef = useRef(null)
  const updateTimerRef = useRef(null)
  const mountedRef = useRef(true)
  const navigate = useNavigate()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
  const formatNumber = (num, decimals = 2) => {
    if (num === undefined || num === null || isNaN(num)) return "0.00"
    return Math.max(0, Number(num)).toFixed(decimals)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds) => {
    if (!seconds || seconds <= 0) return "00:00:00"

    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = Math.floor(seconds % 60)

    return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetchMiningData —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const fetchMiningData = async (forceRefresh = false) => {
    if (!userId) {
      console.error("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
      setError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω")
      setLoading(false)
      return
    }

    try {
      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
      const options = forceRefresh ? { cache: "reload" } : undefined

      const { data, error } = await supabase.rpc(
        "get_mining_info",
        {
          user_id_param: userId,
        },
        options,
      )

      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
        throw error
      }

      console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞:", data)
      setDebugInfo(data) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

      if (!mountedRef.current) return

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data || typeof data !== "object") {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:", data)
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤
      const hasMiners = data.user_has_miners
      console.log("–ù–∞–ª–∏—á–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤:", hasMiners, "–û–±—â–∏–π —Ö–µ—à—Ä–µ–π—Ç:", data.total_hashrate)

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const mining_state = data.mining_state || {}
      const rewards = data.rewards || {}
      const pool = data.pool || {}

      console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞:", mining_state)
      console.log("–ù–∞–≥—Ä–∞–¥—ã:", rewards)
      console.log("–î–∞–Ω–Ω—ã–µ –ø—É–ª–∞:", pool)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—É–ª–µ
      setCurrentPool(pool)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
      setHasMiner(hasMiners)
      setMiningState({
        isMining: !!mining_state.is_mining,
        amount: mining_state.is_mining
          ? Number(mining_state.current_amount || 0)
          : Number(mining_state.frozen_amount || 0),
        remainingSeconds: Number(mining_state.remaining_seconds || 0),
        canCollect: !mining_state.is_mining && Number(mining_state.frozen_amount || 0) > 0,
        hashrate: Number(data.total_hashrate || 0),
        hourlyRate: Number(rewards.hourly_rate || 0),
        poolName: pool.display_name || pool.name || "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
        poolMultiplier: Number(pool.multiplier || 1),
        poolFee: Number(pool.fee_percent || 0),
      })

      // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (mining_state.is_mining) {
        startLocalTimer(Number(mining_state.remaining_seconds || 0), Number(rewards.hourly_rate || 0))
      }

      setLoading(false)
      setError(null)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–∞:", err)
      if (mountedRef.current) {
        setError(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞")
        setLoading(false)

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setMiningState({
          isMining: false,
          amount: 0,
          remainingSeconds: 0,
          canCollect: false,
          hashrate: 0,
          hourlyRate: 0,
          poolName: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
          poolMultiplier: 1,
          poolFee: 0,
        })
      }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
  const startLocalTimer = (seconds, rate) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (timerRef.current) {
      clearInterval(timerRef.current)
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    timerRef.current = setInterval(() => {
      if (!mountedRef.current) return

      setMiningState((prev) => {
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        if (prev.remainingSeconds <= 1) {
          clearInterval(timerRef.current)

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          updateMiningState()

          return {
            ...prev,
            isMining: false,
            canCollect: true,
            remainingSeconds: 0,
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Å—É–º–º—É
        return {
          ...prev,
          remainingSeconds: prev.remainingSeconds - 1,
          amount: prev.isMining ? prev.amount + rate / 3600 : prev.amount,
        }
      })
    }, 1000)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const updateMiningState = async () => {
    try {
      const { data, error } = await supabase.rpc("update_mining_state", {
        user_id_param: userId,
      })

      if (error) throw error

      console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      fetchMiningData()
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–π–Ω–∏–Ω–≥–∞:", err)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  const startMining = async () => {
    try {
      setStarting(true)
      setError(null)

      const { data, error } = await supabase.rpc("start_mining", {
        user_id_param: userId,
      })

      if (error) throw error

      if (!data.success) {
        setError(data.error)
        setStarting(false)
        return
      }

      console.log("–ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω:", data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await fetchMiningData()
      setStarting(false)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞–π–Ω–∏–Ω–≥–∞:", err)
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥")
      setStarting(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥
  const collectRewards = async () => {
    if (!miningState.canCollect || collecting) return

    try {
      setCollecting(true)
      setError(null)

      const { data, error } = await supabase.rpc("collect_mining_rewards", {
        user_id_param: userId,
      })

      if (error) throw error

      if (!data.success) {
        setError(data.error)
        setCollecting(false)
        return
      }

      console.log("–ù–∞–≥—Ä–∞–¥—ã —Å–æ–±—Ä–∞–Ω—ã:", data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
      if (onBalanceUpdate && typeof onBalanceUpdate === "function") {
        onBalanceUpdate(data.new_balance)
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
      const rewardAmount = data.amount
      alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${formatNumber(rewardAmount)} üíé!`)

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ —Å–Ω–æ–≤–∞
      await startMining()
      setCollecting(false)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥")
      setCollecting(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω
  const goToShop = () => {
    navigate("/shop")
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    mountedRef.current = true

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    fetchMiningData(true)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    updateTimerRef.current = setInterval(() => {
      if (mountedRef.current) {
        updateMiningState()
      }
    }, 30000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => {
      mountedRef.current = false

      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (timerRef.current) clearInterval(timerRef.current)
      if (updateTimerRef.current) clearInterval(updateTimerRef.current)
    }
  }, [userId])

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const getProgressPercent = () => {
    const { isMining, remainingSeconds, canCollect } = miningState

    if (!isMining) return canCollect ? 100 : 0

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const duration = 60

    return Math.floor((1 - remainingSeconds / duration) * 100)
  }

  // –†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  const getDailyIncome = () => {
    return miningState.hourlyRate * 24
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–ª–∞
  const handlePoolSelect = (poolData) => {
    console.log("–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø—É–ª:", poolData)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—É–ª–µ
    setCurrentPool({
      id: poolData.id,
      name: poolData.name,
      display_name: poolData.name,
      multiplier: poolData.reward_multiplier,
      fee_percent: poolData.fee,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ —Å –Ω–æ–≤—ã–º –ø—É–ª–æ–º
    setMiningState((prev) => ({
      ...prev,
      poolName: poolData.name,
      poolMultiplier: poolData.reward_multiplier,
      poolFee: poolData.fee,
    }))

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (poolData.forceRefresh) {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      if (timerRef.current) {
        clearInterval(timerRef.current)
        timerRef.current = null
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      setTimeout(() => {
        fetchMiningData()
      }, 300)
    }
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  if (loading) {
    return (
      <div className="bg-[#151B26] p-4 rounded-xl mb-4">
        <div className="flex items-center gap-2 mb-3">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div className="bg-[#1A2234] rounded-lg p-4 flex justify-center">
          <div className="w-6 h-6 border-2 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
        </div>
      </div>
    )
  }

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const renderDebugInfo = () => {
    if (!debugInfo) return null

    return (
      <div className="bg-gray-900 p-3 rounded-lg mb-3 text-xs font-mono overflow-auto">
        <div className="flex items-center gap-2 mb-2">
          <Info size={14} className="text-yellow-500" />
          <span className="text-yellow-500 font-medium">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
        </div>
        <div>
          <div>
            <span className="text-green-400">user_has_miners:</span> {JSON.stringify(debugInfo.user_has_miners)}
          </div>
          <div>
            <span className="text-green-400">total_hashrate:</span> {JSON.stringify(debugInfo.total_hashrate)}
          </div>
          <div>
            <span className="text-green-400">mining_state:</span> {JSON.stringify(debugInfo.mining_state)}
          </div>
          <div>
            <span className="text-green-400">pool:</span> {JSON.stringify(debugInfo.pool)}
          </div>
          <div>
            <span className="text-green-400">rewards:</span> {JSON.stringify(debugInfo.rewards)}
          </div>
          <div>
            <span className="text-green-400">config:</span> {JSON.stringify(debugInfo.config)}
          </div>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤
  if (!hasMiner) {
    return (
      <div className="bg-[#151B26] p-4 rounded-xl mb-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Cpu className="text-blue-500" size={18} />
            <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
        {error && (
          <div className="bg-red-950/30 border border-red-500/20 rounded-lg p-3 mb-3">
            <div className="flex items-start gap-2">
              <AlertCircle className="text-red-500 shrink-0 mt-0.5" size={16} />
              <div className="text-sm text-red-500/90">{error}</div>
            </div>
          </div>
        )}

        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {renderDebugInfo()}

        <div className="bg-[#1A2234] rounded-xl overflow-hidden mb-3">
          <div className="p-6 flex flex-col items-center justify-center text-center">
            <div className="w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center mb-4">
              <ShoppingCart className="text-blue-400" size={24} />
            </div>
            <h3 className="text-lg font-medium mb-2">–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤</h3>
            <p className="text-gray-400 mb-4">
              –î–ª—è –Ω–∞—á–∞–ª–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
            </p>
            <button
              onClick={goToShop}
              className="bg-gradient-to-r from-blue-500 to-blue-400 hover:from-blue-400 hover:to-blue-300 text-white py-2.5 px-4 rounded-lg flex items-center justify-center gap-2 font-medium transition-all shadow-lg shadow-blue-500/20"
            >
              <ShoppingCart size={18} />
              <span>–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω</span>
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-[#151B26] p-4 rounded-xl mb-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Cpu className="text-blue-500" size={18} />
          <span className="font-medium">–ú–∞–π–Ω–∏–Ω–≥</span>
        </div>
        <div
          className="flex items-center gap-2 text-sm cursor-pointer hover:text-blue-400 transition-colors"
          onClick={() => setPoolsModalOpen(true)}
        >
          <span className="text-gray-400">–ü—É–ª: {miningState.poolName}</span>
          <div className="flex items-center gap-1">
            <span className="text-blue-400">{miningState.poolMultiplier}x</span>
            <span className="text-gray-400">{miningState.poolFee}%</span>
          </div>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
      {error && (
        <div className="bg-red-950/30 border border-red-500/20 rounded-lg p-3 mb-3">
          <div className="flex items-start gap-2">
            <AlertCircle className="text-red-500 shrink-0 mt-0.5" size={16} />
            <div className="text-sm text-red-500/90">{error}</div>
          </div>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {renderDebugInfo()}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-[#1A2234] rounded-xl overflow-hidden mb-3">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
        <div className="space-y-3 p-4">
          {/* –í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Wallet size={16} className="text-green-400" />
              <span>–í—Å–µ–≥–æ –¥–æ–±—ã—Ç–æ:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(miningState.amount)}</span>
              <span className="text-blue-400">üíé</span>
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Coins size={16} className="text-yellow-400" />
              <span>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(getDailyIncome())}</span>
              <span className="text-blue-400">üíé/–¥–µ–Ω—å</span>
            </div>
          </div>

          {/* –•–µ—à—Ä–µ–π—Ç */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Zap size={16} className="text-purple-400" />
              <span>–•–µ—à—Ä–µ–π—Ç:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className="font-medium text-white">{formatNumber(miningState.hashrate)}</span>
              <span className="text-blue-400">H/s</span>
            </div>
          </div>

          {/* –¢–∞–π–º–µ—Ä –º–∞–π–Ω–∏–Ω–≥–∞ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 text-gray-400">
              <Clock size={16} className="text-orange-400" />
              <span>–í—Ä–µ–º—è –¥–æ —Å–±–æ—Ä–∞:</span>
            </div>
            <div className="flex items-center gap-1">
              <span className={`font-medium ${miningState.canCollect ? "text-green-400" : "text-white"}`}>
                {formatTime(miningState.remainingSeconds)}
              </span>
            </div>
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –∫–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ */}
        <div className="border-t border-gray-800">
          <div className="p-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-1 text-sm text-gray-400">
                <Clock size={14} />
                <span>
                  {miningState.isMining
                    ? "–ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
                    : miningState.canCollect
                      ? "–ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã"
                      : "–ú–∞–π–Ω–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
                </span>
              </div>
              <div className="text-sm text-gray-400">{getProgressPercent()}%</div>
            </div>

            <div className="w-full bg-gray-800 rounded-full h-1.5 mb-3 overflow-hidden">
              <div
                className="h-full rounded-full bg-gradient-to-r from-blue-500 to-blue-400 relative"
                style={{
                  width: `${getProgressPercent()}%`,
                  transition: "width 1s linear",
                }}
              >
                <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
            <button
              onClick={miningState.canCollect ? collectRewards : startMining}
              disabled={miningState.isMining || collecting || starting}
              className={`
              w-full py-2.5 rounded-lg flex items-center justify-center gap-2 font-medium transition-all
              ${
                miningState.isMining || collecting || starting
                  ? "bg-gray-800 text-gray-400 cursor-not-allowed"
                  : "bg-gradient-to-r from-blue-500 to-blue-400 hover:from-blue-400 hover:to-blue-300 text-white shadow-lg shadow-blue-500/20"
              }
            `}
            >
              {collecting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  <span>–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥...</span>
                </>
              ) : starting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  <span>–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞...</span>
                </>
              ) : miningState.isMining ? (
                <>
                  <Play size={18} className="animate-pulse" />
                  <span>–ú–∞–π–Ω–∏–Ω–≥</span>
                </>
              ) : miningState.canCollect ? (
                <>
                  <ArrowDown size={18} />
                  <span>–°–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã</span>
                </>
              ) : (
                <>
                  <Play size={18} />
                  <span>–ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞</span>
                </>
              )}
            </button>
          </div>
        </div>
      </div>
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—É–ª–∞ */}
      {poolsModalOpen && (
        <PoolsModal
          onClose={() => setPoolsModalOpen(false)}
          user={userId ? { id: userId } : null}
          currentPool={currentPool}
          onPoolSelect={handlePoolSelect}
        />
      )}
    </div>
  )
}

export default MiningRewards

