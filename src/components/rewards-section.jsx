"use client"

import { useState, useEffect } from "react"
import { supabase } from "../supabase"
import { Gift, Clock, ChevronRight } from "lucide-react"

export function RewardsSection({ user, onRewardCollected }) {
  const [rewards, setRewards] = useState([])
  const [loading, setLoading] = useState(true)
  const [collecting, setCollecting] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
  useEffect(() => {
    const fetchRewards = async () => {
      try {
        setLoading(true)

        if (!user?.id) {
          setLoading(false)
          return
        }

        console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.id)

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        const { data: availableRewards, error: rewardsError } = await supabase
          .from("mining_rewards")
          .select("*")
          .eq("user_id", user.id)
          .eq("is_collected", false)
          .order("created_at", { ascending: false })

        if (rewardsError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–≥—Ä–∞–¥:", rewardsError)
          throw rewardsError
        }

        console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:", availableRewards)
        setRewards(availableRewards || [])
        setLoading(false)
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–≥—Ä–∞–¥:", err)
        setLoading(false)
      }
    }

    fetchRewards()
  }, [user])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã
  const collectReward = async (rewardId) => {
    try {
      setCollecting(true)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
      const reward = rewards.find((r) => r.id === rewardId)
      if (!reward) {
        throw new Error("–ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      }

      console.log("–°–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã:", reward)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≥—Ä–∞–¥—ã
      const { error: updateError } = await supabase
        .from("mining_rewards")
        .update({
          is_collected: true,
          collected_at: new Date().toISOString(),
        })
        .eq("id", rewardId)

      if (updateError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥—ã:", updateError)
        throw updateError
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData, error: userError } = await supabase
        .from("users")
        .select("balance")
        .eq("id", user.id)
        .single()

      if (userError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError)
        throw userError
      }

      const newBalance = (userData.balance || 0) + reward.amount
      const { error: balanceError } = await supabase.from("users").update({ balance: newBalance }).eq("id", user.id)

      if (balanceError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", balanceError)
        throw balanceError
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: transactionError } = await supabase.from("transactions").insert({
        user_id: user.id,
        type: "reward",
        amount: reward.amount,
        description: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${reward.description || "–ú–∞–π–Ω–∏–Ω–≥"}`,
        metadata: {
          reward_id: reward.id,
          reward_type: reward.type || "mining",
        },
      })

      if (transactionError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", transactionError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setRewards(rewards.filter((r) => r.id !== rewardId))

      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
      if (onRewardCollected) {
        onRewardCollected(newBalance, reward.amount)
      }

      setCollecting(false)
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–∞–≥—Ä–∞–¥—ã:", error)
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
      setCollecting(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    const date = new Date(dateString)
    return date.toLocaleDateString("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    })
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ–∫—Ü–∏—é
  if (rewards.length === 0 && !loading) {
    return null
  }

  return (
    <div className="bg-[#242838]/80 backdrop-blur-sm p-3 rounded-lg mx-2 mt-2">
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-sm font-bold text-blue-400">–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</h3>
        {rewards.length > 0 && (
          <span className="text-xs text-gray-400">
            {rewards.length} {rewards.length === 1 ? "–Ω–∞–≥—Ä–∞–¥–∞" : "–Ω–∞–≥—Ä–∞–¥"}
          </span>
        )}
      </div>

      {loading ? (
        <div className="flex justify-center items-center py-2">
          <div className="w-5 h-5 border-2 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
        </div>
      ) : (
        <div className="space-y-2">
          {rewards.map((reward) => (
            <div
              key={reward.id}
              className="p-2 rounded-lg border border-blue-500/20 bg-[#1a1d2d] hover:border-blue-500/40 transition-all"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center mr-2">
                    <Gift className="text-blue-400" size={16} />
                  </div>
                  <div>
                    <h4 className="font-medium text-white text-sm">{reward.description || "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∞–π–Ω–∏–Ω–≥"}</h4>
                    <div className="flex items-center text-xs text-gray-400">
                      <Clock size={10} className="mr-1" />
                      <span>{formatDate(reward.created_at)}</span>
                    </div>
                  </div>
                </div>
                <div className="flex items-center">
                  <span className="text-blue-400 font-medium text-sm mr-2">{reward.amount} üíé</span>
                  <button
                    className="bg-blue-500 hover:bg-blue-600 text-white py-1 px-2 rounded-lg text-xs transition-colors flex items-center"
                    onClick={() => collectReward(reward.id)}
                    disabled={collecting}
                  >
                    {collecting ? (
                      <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    ) : (
                      <>
                        <span>–°–æ–±—Ä–∞—Ç—å</span>
                        <ChevronRight size={12} className="ml-1" />
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  )
}

