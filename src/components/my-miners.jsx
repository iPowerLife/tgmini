"use client"

import { useState, useEffect } from "react"
import { HardDrive, Zap, Battery, Clock, Gauge, ChevronDown, ChevronUp } from "lucide-react"

export const MyMiners = ({ miners = [], miningStats = {} }) => {
  const [isExpanded, setIsExpanded] = useState(false)
  const [debugInfo, setDebugInfo] = useState(null)

  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log("MyMiners component received miners:", miners)

    if (miners && miners.length > 0) {
      const firstMiner = miners[0]
      console.log("First miner example:", firstMiner)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setDebugInfo({
        minerKeys: Object.keys(firstMiner),
        minerExample: JSON.stringify(firstMiner, null, 2),
      })
    }
  }, [miners])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
  const validMiners = Array.isArray(miners) && miners.length > 0

  // –ï—Å–ª–∏ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!validMiners) {
    return (
      <div className="bg-[#0F1729]/90 p-4 rounded-xl">
        <div className="flex justify-between items-center mb-3">
          <div className="flex items-center gap-2">
            <HardDrive className="text-purple-500" size={18} />
            <span className="text-white">–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã</span>
          </div>
        </div>
        <div className="bg-[#1A2234] rounded-lg p-4 text-center text-gray-400">
          –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã.
        </div>
      </div>
    )
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
  const formatNumber = (num) => {
    if (isNaN(num) || num === null || num === undefined) return "0.00"
    return Number.parseFloat(num).toFixed(2)
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â—É—é –º–æ—â–Ω–æ—Å—Ç—å –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
  let totalPower = 0
  let totalConsumption = 0

  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  miners.forEach((miner) => {
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø—Ä—è–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (typeof miner.mining_power === "number" && typeof miner.quantity === "number") {
      totalPower += miner.mining_power * miner.quantity
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    else if (miner.model && typeof miner.model.mining_power === "number" && typeof miner.quantity === "number") {
      totalPower += miner.model.mining_power * miner.quantity
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 3: –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
    else if (typeof miner.power === "number" && typeof miner.count === "number") {
      totalPower += miner.power * miner.count
    }
    // –í–∞—Ä–∏–∞–Ω—Ç 4: –¥—Ä—É–≥–∏–µ –∏–º–µ–Ω–∞ —Å–≤–æ–π—Å—Ç–≤
    else if (typeof miner.hashrate === "number" && typeof miner.quantity === "number") {
      totalPower += miner.hashrate * miner.quantity
    }

    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
    if (typeof miner.energy_consumption === "number" && typeof miner.quantity === "number") {
      totalConsumption += miner.energy_consumption * miner.quantity
    } else if (
      miner.model &&
      typeof miner.model.energy_consumption === "number" &&
      typeof miner.quantity === "number"
    ) {
      totalConsumption += miner.model.energy_consumption * miner.quantity
    } else if (typeof miner.consumption === "number" && typeof miner.quantity === "number") {
      totalConsumption += miner.consumption * miner.quantity
    } else if (typeof miner.energy === "number" && typeof miner.quantity === "number") {
      totalConsumption += miner.energy * miner.quantity
    }
  })

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ miningStats, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
  const hourlyIncome = miningStats.hourly_rate || totalPower * 0.5
  const efficiency = totalConsumption > 0 ? totalPower / totalConsumption : 0

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
  const getMinerProperty = (miner, propertyNames, defaultValue = 0) => {
    for (const name of propertyNames) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      if (miner[name] !== undefined && miner[name] !== null) {
        return miner[name]
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ model.name
      if (miner.model && miner.model[name] !== undefined && miner.model[name] !== null) {
        return miner.model[name]
      }
    }
    return defaultValue
  }

  return (
    <div className="bg-[#0F1729]/90 p-3 rounded-xl">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center mb-3 cursor-pointer" onClick={() => setIsExpanded(!isExpanded)}>
        <div className="flex items-center gap-2">
          <HardDrive className="text-purple-500" size={18} />
          <span className="text-white">–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã</span>
        </div>
        <div className="flex items-center gap-1 text-sm">
          <span className="text-gray-400">–í—Å–µ–≥–æ: {miners.length}</span>
          {isExpanded ? (
            <ChevronUp size={16} className="text-gray-400" />
          ) : (
            <ChevronDown size={16} className="text-gray-400" />
          )}
        </div>
      </div>

      {/* –°–µ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div className="grid grid-cols-2 gap-2 mb-3">
        {/* –•–µ—à—Ä–µ–π—Ç */}
        <div className="bg-[#1A2234] p-2.5 rounded-lg">
          <div className="flex items-center gap-1.5 mb-1">
            <Zap size={14} className="text-yellow-500" />
            <span className="text-sm text-gray-400">–•–µ—à—Ä–µ–π—Ç</span>
          </div>
          <div className="text-white">{formatNumber(totalPower)} H/s</div>
        </div>

        {/* –≠–Ω–µ—Ä–≥–∏—è */}
        <div className="bg-[#1A2234] p-2.5 rounded-lg">
          <div className="flex items-center gap-1.5 mb-1">
            <Battery size={14} className="text-green-500" />
            <span className="text-sm text-gray-400">–≠–Ω–µ—Ä–≥–∏—è</span>
          </div>
          <div className="text-white">{formatNumber(totalConsumption)} W</div>
        </div>

        {/* –î–æ—Ö–æ–¥ –≤ —á–∞—Å */}
        <div className="bg-[#1A2234] p-2.5 rounded-lg">
          <div className="flex items-center gap-1.5 mb-1">
            <Clock size={14} className="text-blue-500" />
            <span className="text-sm text-gray-400">–î–æ—Ö–æ–¥ –≤ —á–∞—Å</span>
          </div>
          <div className="text-white">{formatNumber(hourlyIncome)} üíé</div>
        </div>

        {/* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
        <div className="bg-[#1A2234] p-2.5 rounded-lg">
          <div className="flex items-center gap-1.5 mb-1">
            <Gauge size={14} className="text-purple-500" />
            <span className="text-sm text-gray-400">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
          </div>
          <div className="text-white">{formatNumber(efficiency)} H/W</div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –º–∞–π–Ω–µ—Ä–æ–≤ */}
      {isExpanded && (
        <div className="space-y-2">
          {miners.map((miner, index) => {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            const name = getMinerProperty(miner, ["model_name", "name", "display_name"], `–ú–∞–π–Ω–µ—Ä #${index + 1}`)
            const power = getMinerProperty(miner, ["mining_power", "power", "hashrate"], 0)
            const quantity = getMinerProperty(miner, ["quantity", "count"], 1)
            const consumption = getMinerProperty(miner, ["energy_consumption", "consumption", "energy"], 0)

            return (
              <div key={miner.id || index} className="bg-[#1A2234] rounded-lg p-3">
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 bg-[#0F1729] rounded-full flex items-center justify-center">
                      <HardDrive size={16} className="text-purple-400" />
                    </div>
                    <div>
                      <div className="text-sm text-white">{name}</div>
                      <div className="text-xs text-gray-400">
                        {formatNumber(power)} H/s √ó {quantity} —à—Ç.
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-white">{formatNumber(power * quantity)} H/s</div>
                    <div className="text-xs text-gray-400">{formatNumber(consumption * quantity)} W</div>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {isExpanded && debugInfo && (
        <div className="mt-3 p-2 bg-[#1A2234] rounded-lg text-xs text-gray-400">
          <div>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–∞: {debugInfo.minerKeys.join(", ")}</div>
          <pre className="mt-1 overflow-x-auto">{debugInfo.minerExample}</pre>
        </div>
      )}
    </div>
  )
}

export default MyMiners

