// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {number} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<boolean>} - true, –µ—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function canBotMessageUser(chatId) {
  try {
    const { canMessage } = await checkBotStatus(chatId)
    return canMessage
  } catch (error) {
    console.error("Error checking if bot can message user:", error)
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<{canMessage: boolean, error?: string}>}
 */
export async function checkBotStatus(chatId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!TELEGRAM_BOT_TOKEN) {
      return {
        canMessage: false,
        error: "BOT_TOKEN_MISSING",
      }
    }

    const numericChatId = Number(chatId)
    if (isNaN(numericChatId)) {
      return {
        canMessage: false,
        error: "INVALID_CHAT_ID",
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ getChat
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChat`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: numericChatId,
      }),
    })

    const data = await response.json()
    console.log("Bot status check response:", data)

    if (!data.ok) {
      return {
        canMessage: false,
        error: data.description || "TELEGRAM_API_ERROR",
      }
    }

    return { canMessage: true }
  } catch (error) {
    console.error("Error checking bot status:", error)
    return {
      canMessage: false,
      error: "NETWORK_ERROR",
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API
 * @param {number} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç Telegram API
 */
export async function sendTelegramMessage(chatId, text, options = {}) {
  try {
    console.log(`Attempting to send message to chat ID: ${chatId}`)

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const { canMessage, error } = await checkBotStatus(chatId)

    if (!canMessage) {
      console.error(`Cannot send message to ${chatId}. Error:`, error)
      throw new Error(error)
    }

    const requestBody = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
      ...options,
    }

    console.log("Request body:", JSON.stringify(requestBody))

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    })

    const data = await response.json()
    console.log("Telegram API response:", data)

    if (!data.ok) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Telegram
      if (data.error_code === 403) {
        throw new Error("BOT_BLOCKED")
      }
      if (data.error_code === 400 && data.description.includes("chat not found")) {
        throw new Error("CHAT_NOT_FOUND")
      }
      throw new Error(data.description || "TELEGRAM_API_ERROR")
    }

    console.log("Message sent successfully to", chatId)
    return data.result
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
 * @param {number} chatId - ID —á–∞—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {Promise<{success: boolean, message: string}>}
 */
export async function testSendMessage(chatId) {
  try {
    const result = await sendTelegramMessage(
      chatId,
      "<b>üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
    )

    return {
      success: true,
      message: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
    }
  } catch (error) {
    console.error("Test message error:", error)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "

    switch (error.message) {
      case "BOT_TOKEN_MISSING":
        userMessage += "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."
        break
      case "INVALID_CHAT_ID":
        userMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        break
      case "BOT_BLOCKED":
        userMessage += "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        break
      case "CHAT_NOT_FOUND":
        userMessage +=
          "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É @trteeeeeee_bot\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        break
      default:
        userMessage += "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    }

    return {
      success: false,
      message: userMessage,
    }
  }
}

