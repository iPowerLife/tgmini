// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å retry –ª–æ–≥–∏–∫–æ–π
export async function initTelegram(maxRetries = 3) {
  let retries = 0

  while (retries < maxRetries) {
    try {
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ Telegram WebApp
      if (!window.Telegram?.WebApp) {
        throw new Error("Telegram WebApp not loaded")
      }

      const tg = window.Telegram.WebApp

      // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      const events = [
        "web_app_set_header_color",
        "web_app_set_background_color",
        "web_app_set_bottom_bar_color",
        "web_app_request_theme",
        "web_app_request_viewport",
      ]

      events.forEach((event) => {
        tg.onEvent(event, () => {})
      })

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
      tg.ready()
      tg.expand()

      console.log("‚úÖ Telegram WebApp initialized successfully")
      return tg
    } catch (error) {
      console.error(`‚ùå Attempt ${retries + 1}/${maxRetries} failed:`, error.message)
      retries++

      if (retries === maxRetries) {
        console.error("üö´ Failed to initialize Telegram WebApp")
        return null
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise((resolve) => setTimeout(resolve, 1000 * retries))
    }
  }

  return null
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
export function getTelegramUser() {
  try {
    const tg = window.Telegram?.WebApp

    if (!tg) {
      throw new Error("Telegram WebApp not available")
    }

    const user = tg.initDataUnsafe?.user

    if (!user) {
      throw new Error("No user data in Telegram WebApp")
    }

    console.log("‚úÖ Telegram user data retrieved:", user)
    return user
  } catch (error) {
    console.error("‚ùå Error getting Telegram user:", error.message)
    return null
  }
}

