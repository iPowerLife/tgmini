import { createClient } from "@supabase/supabase-js"

console.log("üì° Initializing Supabase...")

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error("‚ùå Missing Supabase environment variables!")
  throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY –≤ —Ñ–∞–π–ª–µ .env")
}

export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: false,
    detectSessionInUrl: false,
  },
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function testConnection(retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const { data, error } = await supabase.from("users").select("count").single()
      if (error) throw error
      console.log("‚úÖ Supabase connection successful")
      return true
    } catch (error) {
      console.error(`‚ùå Connection attempt ${i + 1}/${retries} failed:`, error.message)
      if (i < retries - 1) {
        await new Promise((resolve) => setTimeout(resolve, 1000 * (i + 1)))
      }
    }
  }
  return false
}

