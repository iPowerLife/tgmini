"use client"

import { useState, useEffect } from "react"
import { supabase } from "./supabase"

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [stats, setStats] = useState({
    balance: 0,
    mining_power: 1,
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞
  const [isMining, setIsMining] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const loadUserData = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user
        if (!telegramUser?.id) return

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        const { data: user } = await supabase.from("users").select("*").eq("telegram_id", telegramUser.id).single()

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (user) {
          setStats({
            balance: user.balance,
            mining_power: user.mining_power,
          })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
      }
    }

    loadUserData()
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
  const handleMining = async () => {
    if (isMining) return
    setIsMining(true)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
      const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const newBalance = stats.balance + stats.mining_power
      setStats((prev) => ({
        ...prev,
        balance: newBalance,
      }))

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      if (telegramUser?.id) {
        await supabase.from("users").update({ balance: newBalance }).eq("telegram_id", telegramUser.id)

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await supabase.from("transactions").insert([
          {
            user_id: telegramUser.id,
            amount: stats.mining_power,
            type: "mining",
            description: "–ú–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
          },
        ])
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞:", error)
    } finally {
      setIsMining(false)
    }
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#1a1b1e",
        color: "white",
        padding: "20px",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
      }}
    >
      <div
        style={{
          backgroundColor: "rgba(255, 255, 255, 0.1)",
          padding: "20px",
          borderRadius: "12px",
          marginBottom: "20px",
          width: "100%",
          maxWidth: "300px",
        }}
      >
        <div style={{ marginBottom: "10px", display: "flex", justifyContent: "space-between" }}>
          <span>–ë–∞–ª–∞–Ω—Å:</span>
          <span>{stats.balance.toFixed(2)} üíé</span>
        </div>
        <div style={{ display: "flex", justifyContent: "space-between" }}>
          <span>–ú–æ—â–Ω–æ—Å—Ç—å:</span>
          <span>{stats.mining_power.toFixed(1)} ‚ö°</span>
        </div>
      </div>

      <button
        onClick={handleMining}
        disabled={isMining}
        style={{
          width: "100%",
          maxWidth: "300px",
          padding: "15px",
          backgroundColor: isMining ? "#1f2937" : "#3b82f6",
          border: "none",
          borderRadius: "12px",
          color: "white",
          fontSize: "16px",
          cursor: isMining ? "not-allowed" : "pointer",
          transition: "background-color 0.2s",
        }}
      >
        {isMining ? "–ú–∞–π–Ω–∏–Ω–≥..." : "–ú–∞–π–Ω–∏—Ç—å ‚õèÔ∏è"}
      </button>
    </div>
  )
}

export default App

