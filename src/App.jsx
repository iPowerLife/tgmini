"use client"

import { useState, useEffect } from "react"
import { testConnection } from "./supabase"
import { initTelegram, getTelegramUser } from "./utils/telegram"

export default function App() {
  const [status, setStatus] = useState("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
  const [error, setError] = useState(null)

  useEffect(() => {
    const initialize = async () => {
      try {
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        setStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        const isConnected = await testConnection()
        if (!isConnected) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        }

        // –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        setStatus("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...")
        const tg = initTelegram()
        if (!tg) {
          console.warn("‚ö†Ô∏è Telegram WebApp not available, continuing in dev mode")
        }

        // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = getTelegramUser()
        console.log("üë§ User data:", user)

        setStatus("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
      } catch (err) {
        console.error("‚ùå Initialization error:", err)
        setError(err.message)
      }
    }

    initialize()
  }, [])

  if (error) {
    return (
      <div
        style={{
          minHeight: "100vh",
          backgroundColor: "#1a1b1e",
          color: "white",
          padding: "20px",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
        }}
      >
        <div style={{ color: "#ef4444", marginBottom: "20px" }}>–û—à–∏–±–∫–∞</div>
        <div style={{ color: "#666" }}>{error}</div>
      </div>
    )
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#1a1b1e",
        color: "white",
        padding: "20px",
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        textAlign: "center",
      }}
    >
      <h1 style={{ marginBottom: "20px" }}>{status}</h1>
      <p>–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
    </div>
  )
}

