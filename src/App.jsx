import { supabase } from "./supabaseClient"
import { sendTelegramMessage } from "./telegram"

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
const handleReferral = async (telegramUser) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp
    const startParam = window.Telegram?.WebApp?.initDataUnsafe?.start_param

    if (startParam) {
      console.log("DEBUG: Referral parameter detected:", startParam)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∞–º —Å–µ–±—è
      if (startParam === telegramUser.id.toString()) {
        console.log("User tried to refer themselves")
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: referrerData, error: referrerError } = await supabase
        .from("users")
        .select("id")
        .eq("telegram_id", startParam)
        .single()

      if (referrerError || !referrerData) {
        console.error("Referrer not found:", referrerError)
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: userData, error: userError } = await supabase
        .from("users")
        .select("id")
        .eq("telegram_id", telegramUser.id)
        .single()

      if (userError || !userData) {
        console.error("User not found:", userError)
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
      const { data: existingReferral, error: existingError } = await supabase
        .from("referral_users")
        .select("id")
        .eq("referrer_id", referrerData.id)
        .eq("referred_id", userData.id)
        .single()

      if (!existingError && existingReferral) {
        console.log("Referral already exists")
        return
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      const { error: insertError } = await supabase.from("referral_users").insert({
        referrer_id: referrerData.id,
        referred_id: userData.id,
        status: "active",
      })

      if (insertError) {
        console.error("Error registering referral:", insertError)
      } else {
        console.log("Referral successfully registered")

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –Ω–∞–≥—Ä–∞–¥
        const REFERRER_REWARD = 50 // –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        const REFERRED_REWARD = 25 // –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–æ–≤–æ–¥—É (–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É)
        const { error: referrerUpdateError } = await supabase.rpc("increment_user_balance", {
          user_id_param: referrerData.id,
          amount_param: REFERRER_REWARD,
        })

        if (referrerUpdateError) {
          console.error("Error rewarding referrer:", referrerUpdateError)
        } else {
          console.log(`Referrer rewarded with ${REFERRER_REWARD} diamonds`)

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          await supabase.from("transactions").insert({
            user_id: referrerData.id,
            amount: REFERRER_REWARD,
            type: "referral_reward",
            description: `Reward for inviting user ${userData.id}`,
            created_at: new Date().toISOString(),
          })

          // –ü–æ–ª—É—á–∞–µ–º telegram_id —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const { data: referrerTelegramData, error: referrerTelegramError } = await supabase
            .from("users")
            .select("telegram_id")
            .eq("id", referrerData.id)
            .single()

          if (!referrerTelegramError && referrerTelegramData?.telegram_id) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const notificationText = `
<b>üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${telegramUser.first_name || "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.

<b>üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É: ${REFERRER_REWARD} –∞–ª–º–∞–∑–æ–≤</b>

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!
`

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–æ–≤–æ–¥—É
            sendTelegramMessage(referrerTelegramData.telegram_id, notificationText).then((result) => {
              if (result) {
                console.log(`Notification sent to referrer (${referrerTelegramData.telegram_id})`)
              }
            })
          }
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const { error: referredUpdateError } = await supabase.rpc("increment_user_balance", {
          user_id_param: userData.id,
          amount_param: REFERRED_REWARD,
        })

        if (referredUpdateError) {
          console.error("Error rewarding referred user:", referredUpdateError)
        } else {
          console.log(`Referred user rewarded with ${REFERRED_REWARD} diamonds`)

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          await supabase.from("transactions").insert({
            user_id: userData.id,
            amount: REFERRED_REWARD,
            type: "referral_bonus",
            description: `Bonus for joining via referral link`,
            created_at: new Date().toISOString(),
          })
        }
      }
    }
  } catch (error) {
    console.error("Error processing referral:", error)
  }
}

