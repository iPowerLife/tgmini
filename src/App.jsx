"use client"

import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom"
import { useState, useEffect, useCallback } from "react"
import { initTelegram, getTelegramUser, createOrUpdateUser } from "./utils/telegram"
import { BottomMenu } from "./components/bottom-menu"
import { MinersList } from "./components/miners-list"
import { Shop } from "./components/shop"
import { UserProfile } from "./components/user-profile"
import { TasksSection } from "./components/tasks-section"
import { supabase } from "./supabase"
import { RatingSection } from "./components/rating-section"
import { Toast } from "./components/toast"

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function AppContent({
  user,
  balance,
  handleBalanceUpdate,
  shopData,
  minersData,
  tasksData,
  handleTaskComplete,
  ratingData,
  notifications,
  removeNotification,
}) {
  const location = useLocation()

  return (
    <div className="root-container">
      <div className="page-container">
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <div className="notifications-container">
          {notifications.map((notification) => (
            <Toast
              key={notification.id}
              message={notification.message}
              type={notification.type}
              onClose={() => removeNotification(notification.id)}
            />
          ))}
        </div>

        <Routes>
          <Route
            path="/"
            element={
              <>
                <div className="balance-card">
                  <div className="balance-background" />
                  <div className="balance-content">
                    <div className="balance-label">–ë–∞–ª–∞–Ω—Å</div>
                    <div className="balance-amount">
                      <span>{balance.toFixed(2)}</span>
                      <span className="balance-currency">üíé</span>
                    </div>
                  </div>
                </div>
                <MinersList miners={minersData.miners} totalPower={minersData.totalPower} />
              </>
            }
          />
          <Route
            path="/shop"
            element={
              <Shop
                user={user}
                onPurchase={handleBalanceUpdate}
                categories={shopData.categories}
                models={shopData.models}
              />
            }
          />
          <Route
            path="/tasks"
            element={
              <TasksSection
                user={user}
                onBalanceUpdate={handleBalanceUpdate}
                tasks={tasksData.tasks}
                onTaskComplete={handleTaskComplete}
              />
            }
          />
          <Route path="/rating" element={<RatingSection currentUserId={user?.id} users={ratingData.users} />} />
          <Route
            path="/profile"
            element={<UserProfile user={user} miners={minersData.miners} totalPower={minersData.totalPower} />}
          />
        </Routes>
      </div>
      <BottomMenu />
    </div>
  )
}

function App() {
  const [user, setUser] = useState(null)
  const [balance, setBalance] = useState(0)
  const [error, setError] = useState(null)
  const [loading, setLoading] = useState(true)
  const [notifications, setNotifications] = useState([])

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [shopData, setShopData] = useState({ categories: [], models: [] })
  const [minersData, setMinersData] = useState({ miners: [], totalPower: 0 })
  const [tasksData, setTasksData] = useState({ tasks: [] })
  const [ratingData, setRatingData] = useState({ users: [] })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const addNotification = useCallback((message, type = "info") => {
    const id = Date.now()
    setNotifications((prev) => [...prev, { id, message, type }])

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      removeNotification(id)
    }, 5000)

    return id
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const removeNotification = useCallback((id) => {
    setNotifications((prev) => prev.filter((notification) => notification.id !== id))
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserBalance = useCallback(async (userId, amount) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData, error: userError } = await supabase
        .from("users")
        .select("balance")
        .eq("id", userId)
        .single()

      if (userError) throw userError

      const newBalance = userData.balance + amount

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase.from("users").update({ balance: newBalance }).eq("id", userId)

      if (updateError) throw updateError

      return newBalance
    } catch (error) {
      console.error("Error updating user balance:", error)
      return null
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
  const loadShopData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading shop data...")
      const [categoriesResponse, modelsResponse] = await Promise.all([
        supabase.from("miner_categories").select("*").order("id"),
        supabase.from("miner_models").select("*").order("category_id, price"),
      ])

      if (categoriesResponse.error) throw categoriesResponse.error
      if (modelsResponse.error) throw modelsResponse.error

      setShopData({
        categories: categoriesResponse.data || [],
        models: modelsResponse.data || [],
      })
      console.log("Shop data loaded successfully")
    } catch (error) {
      console.error("Error loading shop data:", error)
    }
  }, [user?.id])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
  const loadMinersData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading miners data...")
      const { data, error } = await supabase
        .from("user_miners")
        .select(`
          *,
          model:miner_models (
            id,
            name,
            display_name,
            mining_power,
            energy_consumption
          )
        `)
        .eq("user_id", user.id)
        .order("purchased_at")

      if (error) throw error

      const totalPower = (data || []).reduce((sum, miner) => sum + miner.model.mining_power * miner.quantity, 0)
      setMinersData({ miners: data || [], totalPower })
      console.log("Miners data loaded successfully")
    } catch (error) {
      console.error("Error loading miners data:", error)
    }
  }, [user?.id])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  const loadTasksData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading tasks data...")
      const { data, error } = await supabase.rpc("get_available_tasks", {
        user_id_param: user.id,
      })

      if (error) throw error

      setTasksData({ tasks: data?.tasks || [] })
      console.log("Tasks data loaded successfully")
    } catch (error) {
      console.error("Error loading tasks data:", error)
    }
  }, [user?.id])

  const loadRatingData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading rating data...")
      const { data, error } = await supabase.rpc("get_users_rating")

      if (error) throw error

      setRatingData({ users: data || [] })
      console.log("Rating data loaded successfully")
    } catch (error) {
      console.error("Error loading rating data:", error)
    }
  }, [user?.id])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - –≤—ã–Ω–µ—Å–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
  const processReferral = useCallback(
    async (startParam, currentUser) => {
      if (!startParam || !currentUser || !currentUser.id) {
        console.log("DEBUG REFERRAL: Missing start param or current user")
        return
      }

      console.log("DEBUG REFERRAL: Processing referral. Param:", startParam, "Current user:", currentUser.id)

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∞–º —Å–µ–±—è
        if (startParam === currentUser.id.toString()) {
          console.log("DEBUG REFERRAL: User tried to refer themselves")
          return
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ telegram_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        const { data: referrerData, error: referrerError } = await supabase
          .from("users")
          .select("id, telegram_id, display_name")
          .eq("telegram_id", startParam)
          .single()

        console.log("DEBUG REFERRAL: Referrer data:", referrerData, "Error:", referrerError)

        if (referrerError || !referrerData) {
          console.error("DEBUG REFERRAL: Referrer not found:", referrerError)
          return
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: userData, error: userError } = await supabase
          .from("users")
          .select("id, telegram_id, display_name")
          .eq("telegram_id", currentUser.id)
          .single()

        console.log("DEBUG REFERRAL: Current user data:", userData, "Error:", userError)

        if (userError || !userData) {
          console.error("DEBUG REFERRAL: Current user not found:", userError)
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
        const { data: existingReferral, error: existingError } = await supabase
          .from("referral_users")
          .select("id")
          .eq("referrer_id", referrerData.id)
          .eq("referred_id", userData.id)
          .single()

        console.log("DEBUG REFERRAL: Existing referral:", existingReferral, "Error:", existingError)

        // PGRST116 - —ç—Ç–æ –∫–æ–¥ –æ—à–∏–±–∫–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        if (!existingError || (existingError.code !== "PGRST116" && existingReferral)) {
          console.log("DEBUG REFERRAL: Referral already exists")
          return
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const REFERRAL_REWARD = 10 // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (10 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤)

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        const { data: insertData, error: insertError } = await supabase
          .from("referral_users")
          .insert({
            referrer_id: referrerData.id,
            referred_id: userData.id,
            status: "active",
            reward: REFERRAL_REWARD,
            notified: false,
          })
          .select()

        console.log("DEBUG REFERRAL: Insert result:", insertData, "Error:", insertError)

        if (insertError) {
          console.error("DEBUG REFERRAL: Error registering referral:", insertError)
          return
        }

        console.log("DEBUG REFERRAL: Referral successfully registered")

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        const newBalance = await updateUserBalance(referrerData.id, REFERRAL_REWARD)

        console.log("DEBUG REFERRAL: New balance after reward:", newBalance)

        if (newBalance !== null) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
          if (referrerData.telegram_id === currentUser.id) {
            addNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${REFERRAL_REWARD} üíé –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`, "success")
          }

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          const { data: transactionData, error: transactionError } = await supabase
            .from("transactions")
            .insert({
              user_id: referrerData.id,
              amount: REFERRAL_REWARD,
              type: "referral_reward",
              description: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:${userData.id}`,
            })
            .select()

          console.log("DEBUG REFERRAL: Transaction record:", transactionData, "Error:", transactionError)
        }
      } catch (error) {
        console.error("DEBUG REFERRAL: Error processing referral:", error)
      }
    },
    [addNotification, updateUserBalance],
  )

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    let mounted = true

    const initApp = async () => {
      try {
        setLoading(true)
        setError(null)

        console.log("Initializing app...")

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        const telegram = initTelegram()
        console.log("Telegram WebApp status:", telegram ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = getTelegramUser()
        console.log("User data:", userData)

        if (!userData) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram")
        }

        // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const dbUser = await createOrUpdateUser(userData)
        console.log("Database user:", dbUser)

        if (!dbUser) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ")
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp –∏–∑ URL
        const startParam = telegram?.initDataUnsafe?.start_param
        console.log("Start param from Telegram:", startParam)

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (startParam) {
          await processReferral(startParam, userData)
        }

        if (mounted) {
          const userWithDisplay = {
            ...dbUser,
            photo_url: userData.photo_url,
            display_name: userData.username
              ? `@${userData.username}`
              : userData.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          }

          setUser(userWithDisplay)
          setBalance(dbUser.balance)
          console.log("User initialized:", userWithDisplay)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
          const checkNewReferrals = async () => {
            try {
              console.log("DEBUG: Checking new referrals for user ID:", dbUser.id)

              const { data: newReferrals, error } = await supabase
                .from("referral_users")
                .select(`
                  id,
                  referred:referred_id(id, display_name),
                  created_at,
                  reward
                `)
                .eq("referrer_id", dbUser.id)
                .eq("status", "active")
                .eq("notified", false)
                .order("created_at", { ascending: false })

              console.log("DEBUG: New referrals query result:", newReferrals, "Error:", error)

              if (error) throw error

              if (newReferrals && newReferrals.length > 0) {
                // –û—Ç–º–µ—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö
                const referralIds = newReferrals.map((ref) => ref.id)

                const { data: updateData, error: updateError } = await supabase
                  .from("referral_users")
                  .update({ notified: true })
                  .in("id", referralIds)

                console.log("DEBUG: Update notified status result:", updateData, "Error:", updateError)

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
                newReferrals.forEach((referral) => {
                  const referredName = referral.referred?.display_name || "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                  const reward = referral.reward || 10
                  addNotification(`${referredName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! +${reward} üíé`, "success")
                })
              }
            } catch (error) {
              console.error("Error checking new referrals:", error)
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          await checkNewReferrals()

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await Promise.all([loadShopData(), loadMinersData(), loadTasksData(), loadRatingData()])
          console.log("All data loaded successfully")
        }
      } catch (err) {
        console.error("Error initializing app:", err)
        if (mounted) {
          setError(err.message)
        }
      } finally {
        if (mounted) {
          setLoading(false)
        }
      }
    }

    initApp()

    return () => {
      mounted = false
    }
  }, [loadShopData, loadMinersData, loadTasksData, loadRatingData, addNotification, processReferral])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const handleBalanceUpdate = useCallback(
    (newBalance) => {
      console.log("Updating balance:", newBalance)
      setBalance(newBalance)
      setUser((prev) => ({ ...prev, balance: newBalance }))
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      loadMinersData()
    },
    [loadMinersData],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const handleTaskComplete = useCallback(
    (taskId) => {
      console.log("Task completed:", taskId)
      loadTasksData()
    },
    [loadTasksData],
  )

  if (loading) {
    return (
      <div className="root-container">
        <div className="page-container">
          <div className="section-container">
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="root-container">
        <div className="page-container">
          <div className="section-container error">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => window.location.reload()} className="shop-button mt-4">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <Router>
      <AppContent
        user={user}
        balance={balance}
        handleBalanceUpdate={handleBalanceUpdate}
        shopData={shopData}
        minersData={minersData}
        tasksData={tasksData}
        handleTaskComplete={handleTaskComplete}
        ratingData={ratingData}
        notifications={notifications}
        removeNotification={removeNotification}
      />
    </Router>
  )
}

export default App

