"use client"

import { useState, useEffect } from "react"
import { supabase } from "./supabase"
import { Stats } from "./components/Stats"
import { MiningButton } from "./components/MiningButton"
import { Shop } from "./components/Shop"
import { Achievements } from "./components/Achievements"
import DailyBonus from "./components/DailyBonus"

export default function App() {
  const [userData, setUserData] = useState(null)
  const [isMining, setIsMining] = useState(false)
  const [cooldown, setCooldown] = useState(0)
  const [showShop, setShowShop] = useState(false)
  const [showAchievements, setShowAchievements] = useState(false)
  const [showBonus, setShowBonus] = useState(false)
  const [bonusInfo, setBonusInfo] = useState(null)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const loadUserData = async () => {
      try {
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user
        if (!telegramUser?.id) return

        const { data: user } = await supabase.from("users").select("*").eq("telegram_id", telegramUser.id).single()

        if (user) {
          setUserData(user)
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–∞
          const { data: lastBonus } = await supabase
            .from("daily_bonuses")
            .select("*")
            .eq("user_id", user.id)
            .order("claimed_at", { ascending: false })
            .limit(1)
            .single()

          const today = new Date()
          today.setHours(0, 0, 0, 0)
          const canClaim = !lastBonus || new Date(lastBonus.claimed_at) < today

          setBonusInfo({
            canClaim,
            lastClaim: lastBonus?.claimed_at || null,
            streak: lastBonus?.streak || 0,
          })
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
      }
    }

    loadUserData()
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
  const handleMining = async () => {
    if (isMining || cooldown > 0 || !userData) return

    setIsMining(true)
    setCooldown(60)

    try {
      const miningReward = userData.mining_power
      const newBalance = userData.balance + miningReward

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setUserData((prev) => ({
        ...prev,
        balance: newBalance,
      }))

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
      await supabase.from("users").update({ balance: newBalance }).eq("id", userData.id)

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await supabase.from("transactions").insert([
        {
          user_id: userData.id,
          amount: miningReward,
          type: "mining",
          description: "–ú–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        },
      ])
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞:", error)
    } finally {
      setIsMining(false)
    }
  }

  useEffect(() => {
    if (cooldown > 0) {
      const timer = setInterval(() => {
        setCooldown((prev) => prev - 1)
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [cooldown])

  if (!userData) {
    return null // –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  }

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#1a1b1e",
        color: "white",
        padding: "20px",
      }}
    >
      <div
        style={{
          maxWidth: "500px",
          margin: "0 auto",
          display: "flex",
          flexDirection: "column",
          gap: "20px",
        }}
      >
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Stats
          balance={userData.balance}
          miningPower={userData.mining_power}
          level={userData.level}
          experience={userData.experience}
          nextLevelExp={userData.next_level_exp}
        />

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr",
            gap: "10px",
            marginBottom: "20px",
          }}
        >
          <button
            onClick={() => setShowShop(true)}
            style={{
              padding: "15px",
              backgroundColor: "rgba(255, 255, 255, 0.1)",
              border: "none",
              borderRadius: "12px",
              color: "white",
              fontSize: "16px",
              cursor: "pointer",
            }}
          >
            –ú–∞–≥–∞–∑–∏–Ω üè™
          </button>
          <button
            onClick={() => setShowAchievements(true)}
            style={{
              padding: "15px",
              backgroundColor: "rgba(255, 255, 255, 0.1)",
              border: "none",
              borderRadius: "12px",
              color: "white",
              fontSize: "16px",
              cursor: "pointer",
            }}
          >
            –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ */}
        {bonusInfo?.canClaim && (
          <button
            onClick={() => setShowBonus(true)}
            style={{
              padding: "15px",
              backgroundColor: "#3b82f6",
              border: "none",
              borderRadius: "12px",
              color: "white",
              fontSize: "16px",
              cursor: "pointer",
              marginBottom: "10px",
            }}
          >
            –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å üéÅ
          </button>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
        <MiningButton onMine={handleMining} cooldown={cooldown} isCooldown={cooldown > 0} />

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        {showShop && <Shop onClose={() => setShowShop(false)} userId={userData.id} />}
        {showAchievements && <Achievements onClose={() => setShowAchievements(false)} userId={userData.id} />}
        {showBonus && (
          <DailyBonus
            onClose={() => setShowBonus(false)}
            userId={userData.id}
            streak={bonusInfo?.streak || 0}
            lastClaim={bonusInfo?.lastClaim}
          />
        )}
      </div>
    </div>
  )
}

