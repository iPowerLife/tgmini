"use client"

import React from "react"
import { supabase, checkDatabaseConnection, initializeDatabase, createUser, getUserData } from "./supabase"

function App() {
  const [user, setUser] = React.useState(null)
  const [loading, setLoading] = React.useState(true)
  const [error, setError] = React.useState(null)
  const [miningCooldown, setMiningCooldown] = React.useState(false)
  const [debugInfo, setDebugInfo] = React.useState({
    telegramWebAppAvailable: false,
    initDataReceived: false,
    userId: null,
    host: window.location.host,
    databaseConnected: false,
    databaseInitialized: false,
  })

  React.useEffect(() => {
    initializeApp()
  }, [])

  async function initializeApp() {
    try {
      console.log("Starting app initialization...")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const isConnected = await checkDatabaseConnection()
      setDebugInfo((prev) => ({
        ...prev,
        databaseConnected: isConnected,
      }))

      if (!isConnected) {
        throw new Error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const isInitialized = await initializeDatabase()
      setDebugInfo((prev) => ({
        ...prev,
        databaseInitialized: isInitialized,
      }))

      if (!isInitialized) {
        throw new Error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
      }

      const tgWebAppAvailable = Boolean(window.Telegram?.WebApp)
      console.log("Telegram WebApp available:", tgWebAppAvailable)

      setDebugInfo((prev) => ({
        ...prev,
        telegramWebAppAvailable: tgWebAppAvailable,
      }))

      if (!tgWebAppAvailable) {
        throw new Error("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
      }

      const tg = window.Telegram.WebApp
      tg.ready()
      tg.expand()

      const userId = tg.initDataUnsafe?.user?.id
      const username = tg.initDataUnsafe?.user?.username

      setDebugInfo((prev) => ({
        ...prev,
        initDataReceived: Boolean(userId),
        userId: userId,
      }))

      if (!userId) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userData = await getUserData(userId)

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!userData) {
        console.log("Creating new user...")
        userData = await createUser(userId, username)
      }

      setUser(userData)
      console.log("App initialization completed")
    } catch (err) {
      console.error("Initialization error:", err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  async function mine() {
    if (miningCooldown || !user) return

    setMiningCooldown(true)
    try {
      console.log("Starting mining...")
      const minedAmount = user.mining_power
      const expGained = Math.floor(minedAmount * 0.1)

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
      const { data: updatedUser, error: updateError } = await supabase
        .from("users")
        .update({
          balance: user.balance + minedAmount,
          experience: user.experience + expGained,
          last_mining: new Date().toISOString(),
        })
        .eq("id", user.id)
        .select()
        .single()

      if (updateError) throw updateError

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { error: transactionError } = await supabase.from("transactions").insert([
        {
          user_id: user.id,
          amount: minedAmount,
          type: "mining",
          description: "–ú–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        },
      ])

      if (transactionError) throw transactionError

      setUser(updatedUser)
      console.log("Mining completed successfully")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      if (updatedUser.experience >= updatedUser.next_level_exp) {
        await levelUp()
      }

      setTimeout(() => {
        setMiningCooldown(false)
      }, 3000)
    } catch (err) {
      console.error("Mining error:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–π–Ω–∏–Ω–≥–µ: " + err.message)
      setMiningCooldown(false)
    }
  }

  async function levelUp() {
    try {
      console.log("Starting level up...")
      const { data: levelData, error: levelError } = await supabase
        .from("levels")
        .select("*")
        .eq("level", user.level + 1)
        .single()

      if (levelError) throw levelError

      const { data: updatedUser, error: updateError } = await supabase
        .from("users")
        .update({
          level: user.level + 1,
          experience: 0,
          next_level_exp: levelData.exp_required,
          balance: user.balance + levelData.reward,
        })
        .eq("id", user.id)
        .select()
        .single()

      if (updateError) throw updateError

      setUser(updatedUser)
      console.log("Level up completed successfully")

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
      await supabase.from("transactions").insert([
        {
          user_id: user.id,
          amount: levelData.reward,
          type: "level_up",
          description: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${updatedUser.level} —É—Ä–æ–≤–Ω—è`,
        },
      ])
    } catch (err) {
      console.error("Level up error:", err)
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: " + err.message)
    }
  }

  if (loading) {
    return (
      <div
        style={{
          padding: "20px",
          backgroundColor: "#1a1b1e",
          color: "white",
          minHeight: "100vh",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          fontFamily: "system-ui, -apple-system, sans-serif",
        }}
      >
        –ó–∞–≥—Ä—É–∑–∫–∞...
      </div>
    )
  }

  if (error) {
    return (
      <div
        style={{
          padding: "20px",
          backgroundColor: "#1a1b1e",
          color: "white",
          minHeight: "100vh",
          fontFamily: "system-ui, -apple-system, sans-serif",
        }}
      >
        <div
          style={{
            background: "rgba(255, 0, 0, 0.1)",
            padding: "20px",
            borderRadius: "12px",
            marginBottom: "20px",
          }}
        >
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
        </div>

        <button
          onClick={() => window.location.reload()}
          style={{
            width: "100%",
            padding: "15px",
            fontSize: "16px",
            fontWeight: "bold",
            color: "white",
            backgroundColor: "#3b82f6",
            border: "none",
            borderRadius: "12px",
            cursor: "pointer",
            marginTop: "20px",
          }}
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>

        <div
          style={{
            marginTop: "20px",
            padding: "10px",
            background: "rgba(0,0,0,0.3)",
            borderRadius: "8px",
            fontSize: "12px",
            fontFamily: "monospace",
          }}
        >
          <div>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {debugInfo.databaseConnected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}</div>
          <div>Telegram WebApp: {debugInfo.telegramWebAppAvailable ? "–î–æ—Å—Ç—É–ø–µ–Ω" : "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}</div>
          <div>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {debugInfo.userId || "–ù–µ—Ç"}</div>
          <div>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {debugInfo.databaseInitialized ? "–î–∞" : "–ù–µ—Ç"}</div>
        </div>
      </div>
    )
  }

  return (
    <div
      style={{
        padding: "20px",
        backgroundColor: "#1a1b1e",
        color: "white",
        minHeight: "100vh",
        fontFamily: "system-ui, -apple-system, sans-serif",
      }}
    >
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div
        style={{
          background: "rgba(255, 255, 255, 0.1)",
          padding: "20px",
          borderRadius: "12px",
          marginBottom: "20px",
        }}
      >
        <h2 style={{ marginBottom: "15px" }}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div style={{ marginBottom: "10px" }}>
          <div style={{ color: "#888" }}>–ë–∞–ª–∞–Ω—Å:</div>
          <div style={{ fontSize: "24px" }}>{user?.balance?.toFixed(2)} üí∞</div>
        </div>
        <div style={{ marginBottom: "10px" }}>
          <div style={{ color: "#888" }}>–ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞:</div>
          <div style={{ fontSize: "24px" }}>{user?.mining_power?.toFixed(2)} ‚ö°</div>
        </div>
        <div style={{ marginBottom: "10px" }}>
          <div style={{ color: "#888" }}>–£—Ä–æ–≤–µ–Ω—å:</div>
          <div style={{ fontSize: "24px" }}>{user?.level || 1} üèÜ</div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
      <button
        onClick={mine}
        disabled={miningCooldown}
        style={{
          width: "100%",
          padding: "15px",
          fontSize: "16px",
          fontWeight: "bold",
          color: "white",
          backgroundColor: miningCooldown ? "#666" : "#3b82f6",
          border: "none",
          borderRadius: "12px",
          cursor: miningCooldown ? "not-allowed" : "pointer",
          transition: "all 0.2s ease",
        }}
      >
        {miningCooldown ? "–ú–∞–π–Ω–∏–Ω–≥..." : "–ú–∞–π–Ω–∏—Ç—å"}
      </button>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è */}
      <div
        style={{
          background: "rgba(255, 255, 255, 0.1)",
          padding: "20px",
          borderRadius: "12px",
          marginTop: "20px",
        }}
      >
        <div style={{ color: "#888", marginBottom: "10px" }}>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:</div>
        <div
          style={{
            width: "100%",
            height: "20px",
            backgroundColor: "rgba(0,0,0,0.3)",
            borderRadius: "10px",
            overflow: "hidden",
          }}
        >
          <div
            style={{
              width: `${(user?.experience / user?.next_level_exp) * 100}%`,
              height: "100%",
              backgroundColor: "#3b82f6",
              transition: "width 0.3s ease",
            }}
          />
        </div>
        <div
          style={{
            textAlign: "center",
            marginTop: "5px",
            fontSize: "14px",
            color: "#888",
          }}
        >
          {user?.experience || 0} / {user?.next_level_exp || 100} XP
        </div>
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div
        style={{
          position: "fixed",
          bottom: 0,
          left: 0,
          right: 0,
          background: "rgba(0, 0, 0, 0.8)",
          color: "white",
          padding: "10px",
          fontSize: "12px",
          fontFamily: "monospace",
        }}
      >
        <div>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {debugInfo.databaseConnected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}</div>
        <div>Telegram WebApp: {debugInfo.telegramWebAppAvailable ? "–î–æ—Å—Ç—É–ø–µ–Ω" : "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}</div>
        <div>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {debugInfo.userId || "–ù–µ—Ç"}</div>
        <div>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {debugInfo.databaseInitialized ? "–î–∞" : "–ù–µ—Ç"}</div>
      </div>
    </div>
  )
}

export default App

