;("use client")

import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom"
import { useState, useEffect, useCallback } from "react"
import { initTelegram, getTelegramUser, createOrUpdateUser } from "./utils/telegram"
import { BottomMenu } from "./components/bottom-menu"
import { MinersList } from "./components/miners-list"
import HomePage from "./pages/home-page"
import Shop from "./components/shop"
import { useMinerPass } from "./hooks/useMinerPass"
import React from "react"
// –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç LoadingScreen
// import LoadingScreen from "./components/loading-screen"
import TasksPage from "./pages/tasks"
import { RatingSection } from "./components/rating-section"
import { UserProfile } from "./components/user-profile"

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const Toast = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose()
    }, 5000)
    return () => clearTimeout(timer)
  }, [onClose])

  return (
    <div
      className={`
fixed
top - 4
right - 4
p - 4
rounded - lg
shadow - lg
$
{
  type === "error" ? "bg-red-500" : "bg-green-500"
}
text - white
max - w - xs
z-50`}
    >
      \
      <div className="flex justify-between">
        <span>{message}</span>
        <button onClick={onClose} className="ml-2 font-bold">
          &times;
        </button>
      </div>
    </div>
  )
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const ToastContext = React.createContext({
  showToast: () => {},
})

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingFallback = () => (
  <div className="section-container">
    <div className="flex justify-center items-center h-64">
      <div className="w-8 h-8 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
    </div>
  </div>
)

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
function ScrollToTop() {
  const { pathname } = useLocation()

  useEffect(() => {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    const container = document.querySelector(".page-container")
    if (container) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
      container.scrollTop = 0
      console.log("–°–±—Ä–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞:", pathname)
    }
  }, [pathname])

  return null
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ AppContent –¥–æ–±–∞–≤–∏–º tasksData –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
function AppContent({
  user,
  balance,
  handleBalanceUpdate,
  shopData,
  minersData,
  tasksData, // –î–æ–±–∞–≤–ª—è–µ–º tasksData
  handleTaskComplete,
  ratingData,
  transactionsData,
  ranksData,
  hasMinerPass,
  cachedMiningInfo,
  onCacheUpdate,
}) {
  console.log("AppContent rendered with:", { user, balance, minersData, ratingData, ranksData, hasMinerPass })

  // –í –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ AppContent –¥–æ–±–∞–≤—å—Ç–µ:
  const [toast, setToast] = useState(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showToast = (message, type = "success") => {
    setToast({ message, type })
  }

  return (
    <ToastContext.Provider value={{ showToast }}>
      <div className="root-container">
        <ScrollToTop />
        {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}

        {/* –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */}
        <div className="page-container">
          <Routes>
            <Route
              path="/"
              element={
                <div className="page-content" key="home-page">
                  <HomePage
                    user={{ ...user, has_miner_pass: hasMinerPass }}
                    balance={balance}
                    minersData={minersData}
                    ratingData={ratingData}
                    transactionsData={transactionsData}
                    ranksData={ranksData}
                    onPurchase={handleBalanceUpdate}
                    cachedMiningInfo={cachedMiningInfo}
                    onCacheUpdate={onCacheUpdate}
                  />
                </div>
              }
            />
            <Route
              path="/miners"
              element={
                <div className="page-content" key="miners-page">
                  <div className="balance-card">
                    <div className="balance-background" />
                    <div className="balance-content">
                      <div className="balance-label">–ë–∞–ª–∞–Ω—Å</div>
                      <div className="balance-amount">
                        <span>{balance.toFixed(2)}</span>
                        <span className="balance-currency">üíé</span>
                      </div>
                    </div>
                  </div>
                  <MinersList miners={minersData.miners} totalPower={minersData.totalPower} />
                </div>
              }
            />
            <Route
              path="/shop"
              element={
                <div className="page-content" key="shop-page">
                  <Shop
                    user={user}
                    onPurchase={handleBalanceUpdate}
                    categories={shopData.categories}
                    models={shopData.models}
                    hasMinerPass={hasMinerPass}
                  />
                </div>
              }
            />
            <Route
              path="/tasks"
              element={
                <div className="page-content" key="tasks-page">
                  <TasksPage
                    user={user}
                    onBalanceUpdate={handleBalanceUpdate}
                    onTaskComplete={handleTaskComplete}
                    tasks={tasksData.tasks} // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                    isLoading={tasksData.loading} // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
                  />
                </div>
              }
            />
            <Route
              path="/rating"
              element={
                <div className="page-content" key="rating-page">
                  <RatingSection currentUserId={user?.id} users={ratingData.users} />
                </div>
              }
            />
            <Route
              path="/profile"
              element={
                <div className="page-content" key="profile-page">
                  <UserProfile user={user} miners={minersData.miners} totalPower={minersData.totalPower} />
                </div>
              }
            />
          </Routes>
        </div>

        {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é */}
        <div className="fixed-bottom-menu">
          <BottomMenu />
        </div>
      </div>
    </ToastContext.Provider>
  )
}

function App() {
  // –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [user, setUser] = useState(null)
  const [balance, setBalance] = useState(0)
  const [error, setError] = useState(null)
  // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ loading –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  const [shopData, setShopData] = useState({ categories: [], models: [] })
  const [minersData, setMinersData] = useState({ miners: [], totalPower: 0 })
  const [tasksData, setTasksData] = useState({ tasks: [], loading: true })
  const [ratingData, setRatingData] = useState({ users: [] })
  const [transactionsData, setTransactionsData] = useState({ transactions: [] })
  const [ranksData, setRanksData] = useState({ ranks: [] })
  const [cachedMiningInfo, setCachedMiningInfo] = useState(null)

  const { hasMinerPass } = useMinerPass(user?.id)

  // –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
  const handleBalanceUpdate = useCallback((newBalance) => {
    setBalance(newBalance)
  }, [])

  const handleTaskComplete = useCallback(() => {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    console.log("Task completed!")
  }, [])

  const updateMiningInfoCache = useCallback(() => {
    console.log("Updating mining info cache...")
  }, [])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initApp = async () => {
      try {
        console.log("Initializing app...")

        const telegram = initTelegram()
        console.log("Telegram WebApp status:", telegram ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        const userData = getTelegramUser()
        console.log("User data:", userData)

        if (!userData) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram")
        }

        const dbUser = await createOrUpdateUser(userData)
        console.log("Database user:", dbUser)

        const userWithDisplay = {
          ...dbUser,
          photo_url: userData.photo_url,
          display_name: userData.username ? `@${userData.username}` : userData.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          has_miner_pass: hasMinerPass,
        }

        setUser(userWithDisplay)
        setBalance(dbUser.balance)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        const loadShopData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
          console.log("Loading shop data...")
          setShopData({ categories: [], models: [] }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const loadMinersData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —à–∞—Ö—Ç–µ—Ä–∞—Ö
          console.log("Loading miners data...")
          setMinersData({ miners: [], totalPower: 0 }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const loadTasksData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö
          console.log("Loading tasks data...")
          setTasksData({ tasks: [], loading: false }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const loadRatingData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞
          console.log("Loading rating data...")
          setRatingData({ users: [] }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const loadTransactionsData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
          console.log("Loading transactions data...")
          setTransactionsData({ transactions: [] }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const loadRanksData = async () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–Ω–≥–∞—Ö
          console.log("Loading ranks data...")
          setRanksData({ ranks: [] }) // –ó–∞–≥–ª—É—à–∫–∞
        }

        const preloadMiningData = async () => {
          console.log("Preloading mining data...")
        }

        await loadShopData()
        await loadMinersData()
        await loadTasksData()
        await loadRatingData()
        await loadTransactionsData()
        await loadRanksData()
        await preloadMiningData()

        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        window.dispatchEvent(new Event("app-data-loaded"))
      } catch (err) {
        console.error("Error initializing app:", err)
        setError(err.message)
      }
    }

    initApp()
  }, []) // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
  if (error) {
    return (
      <div className="root-container">
        <div className="page-container">
          <div className="section-container error">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => window.location.reload()} className="shop-button mt-4">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  // –°—Ä–∞–∑—É —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≥—Ä—É–∑–∫–∏
  return (
    <Router>
      <AppContent
        user={user}
        balance={balance}
        handleBalanceUpdate={handleBalanceUpdate}
        shopData={shopData}
        minersData={minersData}
        tasksData={tasksData}
        handleTaskComplete={handleTaskComplete}
        ratingData={ratingData}
        transactionsData={transactionsData}
        ranksData={ranksData}
        hasMinerPass={hasMinerPass}
        cachedMiningInfo={cachedMiningInfo}
        onCacheUpdate={updateMiningInfoCache}
      />
    </Router>
  )
}

export default App

