"use client"

import { useState, useEffect } from "react"
import { supabase } from "./supabase"
import { initTelegram, getTelegramUser } from "./utils/telegram"
import { getDailyBonusInfo, claimDailyBonus } from "./utils/daily-bonus"

export default function App() {
  const [userData, setUserData] = useState({
    balance: 0,
    mining_power: 1,
    level: 1,
    experience: 0,
    next_level_exp: 100,
  })
  const [isMining, setIsMining] = useState(false)
  const [cooldown, setCooldown] = useState(0)
  const [bonusInfo, setBonusInfo] = useState(null)
  const [bonusTimeLeft, setBonusTimeLeft] = useState("")
  const [isClaimingBonus, setIsClaimingBonus] = useState(false)
  const [bonusError, setBonusError] = useState(null)
  const [showBonusAnimation, setShowBonusAnimation] = useState(false)
  const [claimedBonus, setClaimedBonus] = useState(null)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
  useEffect(() => {
    const initialize = async () => {
      await initTelegram()
      const user = getTelegramUser()

      if (user) {
        try {
          const { data, error } = await supabase.from("users").select("*").eq("telegram_id", user.id).single()

          if (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:", error)
          }

          if (data) {
            setUserData(data)
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            const newUser = {
              telegram_id: user.id,
              username: user.username,
              first_name: user.first_name,
              last_name: user.last_name,
            }

            const { data: newUserData, error: newUserError } = await supabase
              .from("users")
              .insert([newUser])
              .select("*")
              .single()

            if (newUserError) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", newUserError)
            }

            if (newUserData) {
              setUserData(newUserData)
            }
          }

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ
          if (data?.id || (userData && userData.id)) {
            const userId = data?.id || (userData && userData.id)
            const bonusData = await getDailyBonusInfo(userId)
            setBonusInfo(bonusData)
          }
        } catch (error) {
          console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error)
        }
      }
    }

    initialize()
  }, [userData])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
  const handleMining = async () => {
    if (isMining || cooldown > 0) return

    setIsMining(true)
    setCooldown(60) // 60 —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω

    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–∏–Ω–≥–∞
      await new Promise((resolve) => setTimeout(resolve, 5000)) // 5 —Å–µ–∫—É–Ω–¥ –º–∞–π–Ω–∏–Ω–≥–∞

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const miningReward = userData.mining_power // –ù–∞–≥—Ä–∞–¥–∞ —Ä–∞–≤–Ω–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞
      const newBalance = userData.balance + miningReward

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ Supabase
      const { data, error } = await supabase
        .from("users")
        .update({ balance: newBalance })
        .eq("id", userData.id)
        .select("*")
        .single()

      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error)
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      } else if (data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        setUserData((prev) => ({ ...prev, balance: newBalance }))
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞:", error)
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∞–π–Ω–∏–Ω–≥–∞
    } finally {
      setIsMining(false)
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  useEffect(() => {
    if (cooldown > 0) {
      const timer = setInterval(() => {
        setCooldown((prev) => prev - 1)
      }, 1000)
      return () => clearInterval(timer)
    }
  }, [cooldown])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞
  useEffect(() => {
    if (!bonusInfo?.lastClaim) return

    const updateBonusTimer = () => {
      const now = new Date()
      const lastClaimDate = new Date(bonusInfo.lastClaim)
      const nextClaim = new Date(lastClaimDate)
      nextClaim.setDate(nextClaim.getDate() + 1)
      nextClaim.setHours(0, 0, 0, 0)

      const diff = nextClaim - now
      if (diff <= 0) {
        setBonusTimeLeft("")
        return
      }

      const hours = Math.floor(diff / (1000 * 60 * 60))
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
      setBonusTimeLeft(`${hours}—á ${minutes}–º`)
    }

    updateBonusTimer()
    const timer = setInterval(updateBonusTimer, 60000)
    return () => clearInterval(timer)
  }, [bonusInfo?.lastClaim])

  const handleClaimBonus = async () => {
    console.log("handleClaimBonus called", { userId: userData?.id, isClaimingBonus })

    if (!userData?.id || isClaimingBonus) {
      console.log("Early return:", { userId: userData?.id, isClaimingBonus })
      return
    }

    try {
      setIsClaimingBonus(true)
      setBonusError(null)

      console.log("Calling claimDailyBonus...")
      const result = await claimDailyBonus(userData.id)
      console.log("Claim result:", result)

      if (result.success) {
        setUserData(result.user)
        setClaimedBonus(result.bonus)
        setShowBonusAnimation(true)

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
        const newBonusInfo = await getDailyBonusInfo(userData.id)
        console.log("Updated bonus info:", newBonusInfo)
        setBonusInfo(newBonusInfo)

        setTimeout(() => {
          setShowBonusAnimation(false)
          setClaimedBonus(null)
        }, 3000)
      } else {
        console.error("Claim failed:", result.error)
        setBonusError(result.error)
        setTimeout(() => setBonusError(null), 3000)
      }
    } catch (error) {
      console.error("Error in handleClaimBonus:", error)
      setBonusError(error.message)
      setTimeout(() => setBonusError(null), 3000)
    } finally {
      setIsClaimingBonus(false)
    }
  }

  // handleMining –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

  return (
    <div
      style={{
        minHeight: "100vh",
        backgroundColor: "#1a1b1e",
        color: "white",
        padding: "20px",
      }}
    >
      <div
        style={{
          maxWidth: "500px",
          margin: "0 auto",
          display: "flex",
          flexDirection: "column",
          gap: "20px",
        }}
      >
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div
          style={{
            padding: "20px",
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            borderRadius: "12px",
            display: "grid",
            gap: "10px",
          }}
        >
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
            <span>–ë–∞–ª–∞–Ω—Å:</span>
            <span style={{ color: "#4ade80" }}>{userData.balance.toFixed(2)} üíé</span>
          </div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
            <span>–ú–æ—â–Ω–æ—Å—Ç—å:</span>
            <span style={{ color: "#60a5fa" }}>{userData.mining_power.toFixed(1)} ‚ö°</span>
          </div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
            <span>–£—Ä–æ–≤–µ–Ω—å:</span>
            <span style={{ color: "#fbbf24" }}>{userData.level} ‚ú®</span>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ */}
        <div
          style={{
            padding: "15px",
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            borderRadius: "12px",
            position: "relative",
            overflow: "hidden",
          }}
        >
          <div style={{ marginBottom: "10px" }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
              <span>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:</span>
              {bonusInfo?.streak > 0 && <span style={{ color: "#fbbf24" }}>–°–µ—Ä–∏—è: {bonusInfo.streak} üî•</span>}
            </div>
          </div>

          {showBonusAnimation && claimedBonus ? (
            <div
              style={{
                textAlign: "center",
                color: "#4ade80",
                animation: "fadeIn 0.5s ease-out",
              }}
            >
              <div style={{ fontSize: "20px", marginBottom: "5px" }}>+{claimedBonus.amount} üíé</div>
              <div>{claimedBonus.type === "weekend" ? "–í—ã—Ö–æ–¥–Ω–æ–π x2!" : `–°–µ—Ä–∏—è: ${claimedBonus.streak} üî•`}</div>
            </div>
          ) : (
            <button
              onClick={handleClaimBonus}
              disabled={isClaimingBonus || !!bonusTimeLeft}
              style={{
                width: "100%",
                padding: "12px",
                backgroundColor: isClaimingBonus || bonusTimeLeft ? "#1f2937" : "#3b82f6",
                color: "white",
                border: "none",
                borderRadius: "8px",
                cursor: isClaimingBonus || bonusTimeLeft ? "not-allowed" : "pointer",
                fontSize: "16px",
                fontWeight: "bold",
                transition: "all 0.2s ease",
              }}
            >
              {isClaimingBonus
                ? "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞..."
                : bonusTimeLeft
                  ? `–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑: ${bonusTimeLeft}`
                  : "–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å üéÅ"}
            </button>
          )}

          {bonusError && (
            <div
              style={{
                marginTop: "10px",
                color: "#ff4444",
                fontSize: "14px",
                textAlign: "center",
                animation: "fadeIn 0.3s ease-out",
              }}
            >
              {bonusError}
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ */}
        <button
          onClick={handleMining}
          disabled={isMining || cooldown > 0}
          style={{
            padding: "20px",
            backgroundColor: isMining || cooldown > 0 ? "#1f2937" : "#3b82f6",
            color: "white",
            border: "none",
            borderRadius: "12px",
            cursor: isMining || cooldown > 0 ? "not-allowed" : "pointer",
            fontSize: "18px",
            fontWeight: "bold",
            position: "relative",
            overflow: "hidden",
          }}
        >
          {isMining ? "–ú–∞–π–Ω–∏–Ω–≥..." : cooldown > 0 ? `–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ (${cooldown}—Å)` : "–ú–∞–π–Ω–∏—Ç—å ‚õèÔ∏è"}

          {cooldown > 0 && (
            <div
              style={{
                position: "absolute",
                bottom: 0,
                left: 0,
                height: "4px",
                backgroundColor: "#3b82f6",
                width: `${(cooldown / 60) * 100}%`,
                transition: "width 1s linear",
              }}
            />
          )}
        </button>
      </div>

      <style>
        {`
          @keyframes fadeIn {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
          }
        `}
      </style>
    </div>
  )
}

