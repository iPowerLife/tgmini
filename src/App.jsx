"use client"

import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom"
import { useState, useEffect, useCallback, useMemo, lazy, Suspense } from "react"
import { initTelegram, getTelegramUser, createOrUpdateUser } from "./utils/telegram"
import { BottomMenu } from "./components/bottom-menu"
import { MinersList } from "./components/miners-list"
// import { Shop } from "./components/shop"
// import { UserProfile } from "./components/user-profile"
// import { TasksSection } from "./components/tasks-section"
import { supabase } from "./supabase"
// import { RatingSection } from "./components/rating-section"

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const Shop = lazy(() => import("./components/shop").then((module) => ({ default: module.Shop })))
const TasksSection = lazy(() =>
  import("./components/tasks-section").then((module) => ({ default: module.TasksSection })),
)
const RatingSection = lazy(() =>
  import("./components/rating-section").then((module) => ({ default: module.RatingSection })),
)
const UserProfile = lazy(() => import("./components/user-profile").then((module) => ({ default: module.UserProfile })))

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingFallback = () => (
  <div className="section-container">
    <div className="flex justify-center items-center h-64">
      <div className="w-8 h-8 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin"></div>
    </div>
  </div>
)

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function AppContent({
  user,
  balance,
  handleBalanceUpdate,
  shopData,
  minersData,
  tasksData,
  handleTaskComplete,
  ratingData,
}) {
  const location = useLocation()

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    window.scrollTo(0, 0)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const timeoutId = setTimeout(() => {
      window.scrollTo(0, 0)
      document.body.scrollTop = 0
      document.documentElement.scrollTop = 0
    }, 100)

    return () => clearTimeout(timeoutId)
  }, [location])

  return (
    <div className="root-container">
      <div className="page-container">
        <Routes>
          <Route
            path="/"
            element={
              <>
                <div className="balance-card">
                  <div className="balance-background" />
                  <div className="balance-content">
                    <div className="balance-label">–ë–∞–ª–∞–Ω—Å</div>
                    <div className="balance-amount">
                      <span>{balance.toFixed(2)}</span>
                      <span className="balance-currency">üíé</span>
                    </div>
                  </div>
                </div>
                <MinersList miners={minersData.miners} totalPower={minersData.totalPower} />
              </>
            }
          />
          <Route
            path="/shop"
            element={
              <Suspense fallback={<LoadingFallback />}>
                <Shop
                  user={user}
                  onPurchase={handleBalanceUpdate}
                  categories={shopData.categories}
                  models={shopData.models}
                />
              </Suspense>
            }
          />
          <Route
            path="/tasks"
            element={
              <Suspense fallback={<LoadingFallback />}>
                <TasksSection
                  user={user}
                  onBalanceUpdate={handleBalanceUpdate}
                  tasks={tasksData.tasks}
                  onTaskComplete={handleTaskComplete}
                />
              </Suspense>
            }
          />
          <Route
            path="/rating"
            element={
              <Suspense fallback={<LoadingFallback />}>
                <RatingSection currentUserId={user?.id} users={ratingData.users} />
              </Suspense>
            }
          />
          <Route
            path="/profile"
            element={
              <Suspense fallback={<LoadingFallback />}>
                <UserProfile user={user} miners={minersData.miners} totalPower={minersData.totalPower} />
              </Suspense>
            }
          />
        </Routes>
      </div>
      <BottomMenu />
    </div>
  )
}

function App() {
  const [user, setUser] = useState(null)
  const [balance, setBalance] = useState(0)
  const [error, setError] = useState(null)
  const [loading, setLoading] = useState(true)

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [shopData, setShopData] = useState({ categories: [], models: [] })
  const [minersData, setMinersData] = useState({ miners: [], totalPower: 0 })
  const [tasksData, setTasksData] = useState({ tasks: [] })
  const [ratingData, setRatingData] = useState({ users: [] })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
  const loadShopData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading shop data...")
      const [categoriesResponse, modelsResponse] = await Promise.all([
        supabase.from("miner_categories").select("*").order("id"),
        supabase.from("miner_models").select("*").order("category_id, price"),
      ])

      if (categoriesResponse.error) throw categoriesResponse.error
      if (modelsResponse.error) throw modelsResponse.error

      setShopData({
        categories: categoriesResponse.data || [],
        models: modelsResponse.data || [],
      })
      console.log("Shop data loaded successfully")
    } catch (error) {
      console.error("Error loading shop data:", error)
    }
  }, [user?.id])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
  const loadMinersData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading miners data...")
      const { data, error } = await supabase
        .from("user_miners")
        .select(`
          *,
          model:miner_models (
            id,
            name,
            display_name,
            mining_power,
            energy_consumption
          )
        `)
        .eq("user_id", user.id)
        .order("purchased_at")

      if (error) throw error

      const totalPower = (data || []).reduce((sum, miner) => sum + miner.model.mining_power * miner.quantity, 0)
      setMinersData({ miners: data || [], totalPower })
      console.log("Miners data loaded successfully")
    } catch (error) {
      console.error("Error loading miners data:", error)
    }
  }, [user?.id])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  const loadTasksData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading tasks data...")
      const { data, error } = await supabase.rpc("get_available_tasks", {
        user_id_param: user.id,
      })

      if (error) throw error

      setTasksData({ tasks: data?.tasks || [] })
      console.log("Tasks data loaded successfully")
    } catch (error) {
      console.error("Error loading tasks data:", error)
    }
  }, [user?.id])

  const loadRatingData = useCallback(async () => {
    if (!user?.id) return

    try {
      console.log("Loading rating data...")
      const { data, error } = await supabase.rpc("get_users_rating")

      if (error) throw error

      setRatingData({ users: data || [] })
      console.log("Rating data loaded successfully")
    } catch (error) {
      console.error("Error loading rating data:", error)
    }
  }, [user?.id])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    let mounted = true

    const initApp = async () => {
      try {
        setLoading(true)
        setError(null)

        console.log("Initializing app...")
        const telegram = initTelegram()
        console.log("Telegram WebApp status:", telegram ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        const userData = getTelegramUser()
        console.log("User data:", userData)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const handleReferral = async (telegramUser) => {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp
            const startParam = window.Telegram?.WebApp?.initDataUnsafe?.start_param

            if (startParam) {
              console.log("DEBUG: Referral parameter detected:", startParam)

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∞–º —Å–µ–±—è
              if (startParam === telegramUser.id.toString()) {
                console.log("User tried to refer themselves")
                return
              }

              // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              const { data: referrerData, error: referrerError } = await supabase
                .from("users")
                .select("id")
                .eq("telegram_id", startParam)
                .single()

              if (referrerError || !referrerData) {
                console.error("Referrer not found:", referrerError)
                return
              }

              // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
              const { data: userData, error: userError } = await supabase
                .from("users")
                .select("id")
                .eq("telegram_id", telegramUser.id)
                .single()

              if (userError || !userData) {
                console.error("User not found:", userError)
                return
              }

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª
              const { data: existingReferral, error: existingError } = await supabase
                .from("referral_users")
                .select("id")
                .eq("referrer_id", referrerData.id)
                .eq("referred_id", userData.id)
                .single()

              if (!existingError && existingReferral) {
                console.log("Referral already exists")
                return
              }

              // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
              const { error: insertError } = await supabase.from("referral_users").insert({
                referrer_id: referrerData.id,
                referred_id: userData.id,
                status: "active",
              })

              if (insertError) {
                console.error("Error registering referral:", insertError)
              } else {
                console.log("Referral successfully registered")

                // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:

                // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –Ω–∞–≥—Ä–∞–¥ (–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                const REFERRER_REWARD = 50 // –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                const REFERRED_REWARD = 25 // –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É

                // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–æ–≤–æ–¥—É (–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É)
                const { error: referrerUpdateError } = await supabase.rpc("increment_user_balance", {
                  user_id_param: referrerData.id,
                  amount_param: REFERRER_REWARD,
                })

                if (referrerUpdateError) {
                  console.error("Error rewarding referrer:", referrerUpdateError)
                } else {
                  console.log(`Referrer rewarded with ${REFERRER_REWARD} diamonds`)

                  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞)
                  await supabase.from("transactions").insert({
                    user_id: referrerData.id,
                    amount: REFERRER_REWARD,
                    type: "referral_reward",
                    description: `Reward for inviting user ${userData.id}`,
                    created_at: new Date().toISOString(),
                  })
                }

                // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                const { error: referredUpdateError } = await supabase.rpc("increment_user_balance", {
                  user_id_param: userData.id,
                  amount_param: REFERRED_REWARD,
                })

                if (referredUpdateError) {
                  console.error("Error rewarding referred user:", referredUpdateError)
                } else {
                  console.log(`Referred user rewarded with ${REFERRED_REWARD} diamonds`)

                  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                  await supabase.from("transactions").insert({
                    user_id: userData.id,
                    amount: REFERRED_REWARD,
                    type: "referral_bonus",
                    description: `Bonus for joining via referral link`,
                    created_at: new Date().toISOString(),
                  })
                }
              }
            }
          } catch (error) {
            console.error("Error processing referral:", error)
          }
        }

        await handleReferral(userData)

        if (!userData) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram")
        }

        const dbUser = await createOrUpdateUser(userData)
        console.log("Database user:", dbUser)

        if (!dbUser) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ")
        }

        if (mounted) {
          const userWithDisplay = {
            ...dbUser,
            photo_url: userData.photo_url,
            display_name: userData.username
              ? `@${userData.username}`
              : userData.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
          }

          setUser(userWithDisplay)
          setBalance(dbUser.balance)
          console.log("User initialized:", userWithDisplay)

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await Promise.all([loadShopData(), loadMinersData(), loadTasksData(), loadRatingData()])
          console.log("All data loaded successfully")
        }
      } catch (err) {
        console.error("Error initializing app:", err)
        if (mounted) {
          setError(err.message)
        }
      } finally {
        if (mounted) {
          setLoading(false)
        }
      }
    }

    initApp()

    return () => {
      mounted = false
    }
  }, [loadShopData, loadMinersData, loadTasksData, loadRatingData])

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞
    const handlePageLoad = () => {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.history.pushState(null, "", "/")
    }

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (window.performance) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º performance API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const navEntries = performance.getEntriesByType("navigation")
      if (navEntries.length > 0 && navEntries[0].type === "reload") {
        handlePageLoad()
      } else if (window.performance.navigation && window.performance.navigation.type === 1) {
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        handlePageLoad()
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener("load", handlePageLoad)

    // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener("load", handlePageLoad)
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const handleBalanceUpdate = useCallback(
    (newBalance) => {
      console.log("Updating balance:", newBalance)
      setBalance(newBalance)
      setUser((prev) => ({ ...prev, balance: newBalance }))
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
      loadMinersData()
    },
    [loadMinersData],
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
  const handleTaskComplete = useCallback(
    (taskId) => {
      console.log("Task completed:", taskId)
      loadTasksData()
    },
    [loadTasksData],
  )

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º AppContent –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
  const MemoizedAppContent = useMemo(() => {
    return (
      <AppContent
        user={user}
        balance={balance}
        handleBalanceUpdate={handleBalanceUpdate}
        shopData={shopData}
        minersData={minersData}
        tasksData={tasksData}
        handleTaskComplete={handleTaskComplete}
        ratingData={ratingData}
      />
    )
  }, [user, balance, handleBalanceUpdate, shopData, minersData, tasksData, handleTaskComplete, ratingData])

  if (loading) {
    return (
      <div className="root-container">
        <div className="page-container">
          <div className="section-container">
            <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</div>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="root-container">
        <div className="page-container">
          <div className="section-container error">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => window.location.reload()} className="shop-button mt-4">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    )
  }

  return <Router>{MemoizedAppContent}</Router>
}

export default App

