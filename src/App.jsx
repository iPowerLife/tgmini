"use client"

import { useState, useEffect } from "react"
import { LoadingScreen } from "./components/LoadingScreen"
import { supabase } from "./supabase"

export default function App() {
  const [status, setStatus] = useState("initializing")
  const [error, setError] = useState(null)
  const [user, setUser] = useState(null)

  useEffect(() => {
    let mounted = true

    async function initialize() {
      try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
        const tg = window.Telegram?.WebApp
        if (!tg) {
          throw new Error("Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        }

        if (!mounted) return
        setStatus("connecting")

        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const telegramUser = tg.initDataUnsafe?.user
        if (!telegramUser) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: userData, error: dbError } = await supabase
          .from("users")
          .select("*")
          .eq("telegram_id", telegramUser.id)
          .single()

        if (dbError && dbError.code !== "PGRST116") {
          throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbError.message}`)
        }

        if (!mounted) return

        // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUser(
          userData || {
            telegram_id: telegramUser.id,
            username: telegramUser.username,
            balance: 0,
            mining_power: 1,
          },
        )

        setStatus("ready")

        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        tg.ready()
        tg.expand()
      } catch (err) {
        console.error("Initialization error:", err)
        if (mounted) {
          setError(err.message)
          setStatus("error")
        }
      }
    }

    initialize()

    return () => {
      mounted = false
    }
  }, [])

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
  if (status === "initializing" || status === "connecting") {
    return (
      <LoadingScreen
        message={status === "initializing" ? "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." : "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."}
        subMessage={status === "initializing" ? "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è" : "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
      />
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (status === "error") {
    return (
      <div
        style={{
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          gap: "20px",
          padding: "20px",
          backgroundColor: "#1a1b1e",
          color: "white",
          textAlign: "center",
        }}
      >
        <div style={{ color: "#ff4444", marginBottom: "10px" }}>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</div>
        <div style={{ color: "#666", fontSize: "14px" }}>{error}</div>
        <button
          onClick={() => window.location.reload()}
          style={{
            padding: "10px 20px",
            backgroundColor: "#3b82f6",
            color: "white",
            border: "none",
            borderRadius: "4px",
            cursor: "pointer",
            marginTop: "20px",
          }}
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    )
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  return (
    <div
      style={{
        minHeight: "100vh",
        display: "flex",
        flexDirection: "column",
        padding: "20px",
        backgroundColor: "#1a1b1e",
        color: "white",
      }}
    >
      <h1 style={{ marginBottom: "20px" }}>Telegram Mining Game</h1>

      {user && (
        <div
          style={{
            padding: "20px",
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            borderRadius: "8px",
            marginBottom: "20px",
          }}
        >
          <div>ID: {user.telegram_id}</div>
          <div>–ë–∞–ª–∞–Ω—Å: {user.balance || 0} üíé</div>
          <div>–ú–æ—â–Ω–æ—Å—Ç—å: {user.mining_power || 1} ‚ö°</div>
        </div>
      )}

      <button
        onClick={() => {
          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
          console.log("Mining started")
        }}
        style={{
          padding: "15px",
          backgroundColor: "#3b82f6",
          color: "white",
          border: "none",
          borderRadius: "8px",
          cursor: "pointer",
          fontSize: "16px",
          fontWeight: "bold",
        }}
      >
        –ù–∞—á–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥ ‚õèÔ∏è
      </button>
    </div>
  )
}

