const { Telegraf, Markup } = require("telegraf")
const { createClient } = require("@supabase/supabase-js")
const dotenv = require("dotenv")

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ["BOT_TOKEN", "SUPABASE_URL", "SUPABASE_KEY"]
for (const varName of requiredEnvVars) {
  if (!process.env[varName]) {
    console.error(`Missing required environment variable: ${varName}`)
    process.exit(1)
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN)

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(telegramId, username) {
  try {
    const { data: existingUser } = await supabase.from("users").select("*").eq("telegram_id", telegramId).single()

    if (existingUser) {
      return existingUser
    }

    const { data: newUser, error } = await supabase
      .from("users")
      .insert([{ telegram_id: telegramId, username: username }])
      .select()
      .single()

    if (error) {
      console.error("Error creating user:", error)
      return null
    }

    return newUser
  } catch (error) {
    console.error("Error in registerUser:", error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞
async function mineCoins(userId) {
  try {
    const { data: user, error: userError } = await supabase.from("users").select("*").eq("id", userId).single()

    if (userError) {
      console.error("Error getting user:", userError)
      return { success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞
    const lastMining = new Date(user.last_mining)
    const now = new Date()
    const diffMinutes = (now - lastMining) / (1000 * 60)

    if (diffMinutes < 1) {
      return {
        success: false,
        message: `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${Math.ceil(60 - diffMinutes * 60)} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞`,
      }
    }

    // –†–∞—Å—á–µ—Ç –¥–æ–±—ã—Ç—ã—Ö –º–æ–Ω–µ—Ç
    const minedAmount = user.mining_power

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    const { error: updateError } = await supabase
      .from("users")
      .update({
        balance: user.balance + minedAmount,
        last_mining: now.toISOString(),
      })
      .eq("id", userId)

    if (updateError) {
      console.error("Error updating user:", updateError)
      return { success: false, message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" }
    }

    // –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await supabase.from("transactions").insert([
      {
        user_id: userId,
        amount: minedAmount,
        type: "mining",
        description: "–ú–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
      },
    ])

    return {
      success: true,
      message: `–í—ã –¥–æ–±—ã–ª–∏ ${minedAmount.toFixed(2)} –º–æ–Ω–µ—Ç!`,
      balance: user.balance + minedAmount,
    }
  } catch (error) {
    console.error("Error in mineCoins:", error)
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–π–Ω–∏–Ω–≥–µ" }
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  try {
    const user = await registerUser(ctx.from.id, ctx.from.username)
    if (!user) {
      return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }

    return ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞–π–Ω–∏–Ω–≥, ${ctx.from.first_name}!`,
      Markup.keyboard([
        ["‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å", "üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
      ]).resize(),
    )
  } catch (error) {
    console.error("Error in start command:", error)
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–∞–π–Ω–∏–Ω–≥–∞
bot.hears("‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å", async (ctx) => {
  try {
    const user = await registerUser(ctx.from.id, ctx.from.username)
    if (!user) {
      return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }

    const result = await mineCoins(user.id)
    await ctx.reply(result.message)

    if (result.success) {
      await ctx.reply(`–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
    }
  } catch (error) {
    console.error("Error in mine command:", error)
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–π–Ω–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å–∞
bot.hears("üí∞ –ë–∞–ª–∞–Ω—Å", async (ctx) => {
  try {
    const user = await registerUser(ctx.from.id, ctx.from.username)
    if (!user) {
      return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    }

    const { data: userData } = await supabase.from("users").select("balance, mining_power").eq("id", user.id).single()

    return ctx.reply(
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${userData.balance.toFixed(2)} –º–æ–Ω–µ—Ç\n` +
        `‚ö° –ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${userData.mining_power.toFixed(2)} –º–æ–Ω–µ—Ç/–º–∏–Ω`,
    )
  } catch (error) {
    console.error("Error in balance command:", error)
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log("Starting bot...")
bot
  .launch()
  .then(() => {
    console.log("Bot successfully started!")
  })
  .catch((error) => {
    console.error("Failed to start bot:", error)
    process.exit(1)
  })

// Graceful shutdown
process.once("SIGINT", () => bot.stop("SIGINT"))
process.once("SIGTERM", () => bot.stop("SIGTERM"))

