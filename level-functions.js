import { supabase } from "./supabaseClient"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function addExperience(userId, amount) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error: userError } = await supabase.from("users").select("*").eq("id", userId).single()

  if (userError) {
    console.error("Error getting user:", userError)
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
  const newExp = user.experience + amount
  let newLevel = user.level
  let leveledUp = false
  let reward = 0

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
  if (newExp >= user.next_level_exp) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
    const { data: nextLevel, error: levelError } = await supabase
      .from("levels")
      .select("*")
      .eq("level", user.level + 1)
      .single()

    if (!levelError && nextLevel) {
      newLevel = user.level + 1
      leveledUp = true
      reward = nextLevel.reward

      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      const { data: nextNextLevel } = await supabase
        .from("levels")
        .select("*")
        .eq("level", newLevel + 1)
        .single()

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase
        .from("users")
        .update({
          level: newLevel,
          experience: newExp,
          next_level_exp: nextNextLevel ? nextNextLevel.exp_required : user.next_level_exp * 2,
          balance: user.balance + reward,
        })
        .eq("id", userId)

      if (updateError) {
        console.error("Error updating user level:", updateError)
        return { success: false, message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è" }
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
      if (reward > 0) {
        await supabase.from("transactions").insert([
          {
            user_id: userId,
            amount: reward,
            type: "level_reward",
            description: `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${newLevel} —É—Ä–æ–≤–Ω—è`,
          },
        ])
      }
    }
  } else {
    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
    const { error: updateError } = await supabase
      .from("users")
      .update({
        experience: newExp,
      })
      .eq("id", userId)

    if (updateError) {
      console.error("Error updating user experience:", updateError)
      return { success: false, message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞" }
    }
  }

  return {
    success: true,
    leveledUp,
    newLevel,
    newExp,
    reward,
    nextLevelExp: leveledUp
      ? (await supabase.from("users").select("next_level_exp").eq("id", userId).single()).data.next_level_exp
      : user.next_level_exp,
  }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
async function mineCoins(userId) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user, error: userError } = await supabase.from("users").select("*").eq("id", userId).single()

  if (userError) {
    console.error("Error getting user:", userError)
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞ (–º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞)
  const lastMining = new Date(user.last_mining)
  const now = new Date()
  const diffMinutes = (now - lastMining) / (1000 * 60)

  if (diffMinutes < 1) {
    return {
      success: false,
      message: `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${Math.ceil(60 - diffMinutes * 60)} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞`,
    }
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–±—ã—Ç—ã–µ –º–æ–Ω–µ—Ç—ã (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç mining_power –∏ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
  const minedCoins = user.mining_power * Math.min(diffMinutes, 60)

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç (10% –æ—Ç –¥–æ–±—ã—Ç—ã—Ö –º–æ–Ω–µ—Ç)
  const expGained = Math.floor(minedCoins * 0.1)

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞
  const { error: updateError } = await supabase
    .from("users")
    .update({
      balance: user.balance + minedCoins,
      last_mining: now.toISOString(),
    })
    .eq("id", userId)

  if (updateError) {
    console.error("Error updating user:", updateError)
    return { success: false, message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" }
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  await supabase.from("transactions").insert([
    {
      user_id: userId,
      amount: minedCoins,
      type: "mining",
      description: "–ú–∞–π–Ω–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
    },
  ])

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
  const expResult = await addExperience(userId, expGained)

  let message = `–í—ã –¥–æ–±—ã–ª–∏ ${minedCoins.toFixed(2)} –º–æ–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ ${expGained} –æ–ø—ã—Ç–∞!`

  if (expResult.leveledUp) {
    message += `\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${expResult.newLevel} —É—Ä–æ–≤–Ω—è –∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É ${expResult.reward} –º–æ–Ω–µ—Ç!`
  }

  return {
    success: true,
    message: message,
    balance: user.balance + minedCoins,
    experience: expResult.newExp,
    level: expResult.newLevel,
    leveledUp: expResult.leveledUp,
    nextLevelExp: expResult.nextLevelExp,
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { addExperience, mineCoins }

