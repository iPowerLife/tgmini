import { createClient } from "@supabase/supabase-js"
import { Telegraf, session, Markup } from "telegraf"
import dotenv from "dotenv"

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN)

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session())

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (—Ç–µ –∂–µ, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
async function registerUser(telegramId, username) {
  try {
    const { data: existingUser, error: selectError } = await supabase
      .from("users")
      .select("*")
      .eq("telegram_id", telegramId)
      .single()

    if (selectError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", selectError)
      return null
    }

    if (existingUser) {
      return existingUser
    }

    const { data: newUser, error: insertError } = await supabase
      .from("users")
      .insert([{ telegram_id: telegramId, username: username }])
      .single()

    if (insertError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", insertError)
      return null
    }

    return newUser
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    return null
  }
}

async function mineCoins(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –µ–≥–æ –º–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞
    const { data: user, error: userError } = await supabase
      .from("users")
      .select("id, balance, mining_power")
      .eq("id", userId)
      .single()

    if (userError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ." }
    }

    if (!user) {
      return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." }
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±—ã—Ç—ã—Ö –º–æ–Ω–µ—Ç (–º–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ * 1 –º–∏–Ω—É—Ç–∞)
    const minedAmount = user.mining_power

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = user.balance + minedAmount
    const { error: updateError } = await supabase.from("users").update({ balance: newBalance }).eq("id", userId)

    if (updateError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", updateError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞." }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { error: transactionError } = await supabase
      .from("transactions")
      .insert([{ user_id: userId, amount: minedAmount, type: "mining" }])

    if (transactionError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", transactionError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    }

    return { success: true, message: `–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–º–∞–π–Ω–∏–ª–∏ ${minedAmount.toFixed(2)} –º–æ–Ω–µ—Ç!`, balance: newBalance }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–π–Ω–∏–Ω–≥–µ:", error)
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –º–∞–π–Ω–∏–Ω–≥–∞." }
  }
}

async function getAvailableMiners() {
  try {
    const { data: miners, error } = await supabase.from("miners").select("*")

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤:", error)
      return []
    }

    return miners
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤:", error)
    return []
  }
}

async function buyMiner(userId, minerId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const { data: user, error: userError } = await supabase
      .from("users")
      .select("id, balance, mining_power")
      .eq("id", userId)
      .single()

    if (userError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ." }
    }

    if (!user) {
      return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
    const { data: miner, error: minerError } = await supabase.from("miners").select("*").eq("id", minerId).single()

    if (minerError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–µ—Ä–µ:", minerError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–µ—Ä–µ." }
    }

    if (!miner) {
      return { success: false, message: "–ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω." }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.balance < miner.price) {
      return { success: false, message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞." }
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newBalance = user.balance - miner.price
    const newMiningPower = user.mining_power + miner.power

    const { error: updateError } = await supabase
      .from("users")
      .update({ balance: newBalance, mining_power: newMiningPower })
      .eq("id", userId)

    if (updateError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", updateError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞." }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingInventoryItem, error: selectError } = await supabase
      .from("user_miners")
      .select("*")
      .eq("user_id", userId)
      .eq("miner_id", minerId)

    if (selectError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", selectError)
      return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è." }
    }

    if (existingInventoryItem && existingInventoryItem.length > 0) {
      // –ï—Å–ª–∏ –º–∞–π–Ω–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const { error: updateInventoryError } = await supabase
        .from("user_miners")
        .update({ quantity: existingInventoryItem[0].quantity + 1 })
        .eq("user_id", userId)
        .eq("miner_id", minerId)

      if (updateInventoryError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", updateInventoryError)
        return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è." }
      }
    } else {
      // –ï—Å–ª–∏ –º–∞–π–Ω–µ—Ä–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const { error: insertInventoryError } = await supabase
        .from("user_miners")
        .insert([{ user_id: userId, miner_id: minerId, quantity: 1 }])

      if (insertInventoryError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", insertInventoryError)
        return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å." }
      }
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const { error: transactionError } = await supabase
      .from("transactions")
      .insert([{ user_id: userId, amount: -miner.price, type: "purchase", description: `–ö—É–ø–ª–µ–Ω –º–∞–π–Ω–µ—Ä ${miner.name}` }])

    if (transactionError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", transactionError)
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    }

    return {
      success: true,
      message: `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${miner.name}!`,
      balance: newBalance,
      mining_power: newMiningPower,
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞–π–Ω–µ—Ä–∞:", error)
    return { success: false, message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –º–∞–π–Ω–µ—Ä–∞." }
  }
}

async function getUserMiners(userId) {
  try {
    const { data: userMiners, error } = await supabase
      .from("user_miners")
      .select("*, miners(name, power, price)")
      .eq("user_id", userId)

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
      return []
    }

    return userMiners
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    return []
  }
}
// ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
bot.start(async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞–π–Ω–∏–Ω–≥, ${ctx.from.first_name}!`,
      Markup.keyboard([
        ["‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å", "üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["üõí –ú–∞–≥–∞–∑–∏–Ω", "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
      ]).resize(),
    )
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

bot.help((ctx) => {
  ctx.reply(`
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/mine - –ú–∞–π–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
/shop - –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤
/inventory - –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.
  `)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–æ–∫
bot.hears("‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    const result = await mineCoins(user.id)
    ctx.reply(result.message)
    if (result.success) {
      ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
    }
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

bot.hears("üí∞ –ë–∞–ª–∞–Ω—Å", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

bot.hears("üõí –ú–∞–≥–∞–∑–∏–Ω", async (ctx) => {
  const miners = await getAvailableMiners()
  if (miners.length > 0) {
    let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã:\n\n"
    const buttons = []

    miners.forEach((miner, index) => {
      message += `${index + 1}. ${miner.name}\n`
      message += `   –ú–æ—â–Ω–æ—Å—Ç—å: ${miner.power} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
      message += `   –¶–µ–Ω–∞: ${miner.price} –º–æ–Ω–µ—Ç\n`
      message += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${miner.description}\n\n`

      buttons.push(Markup.button.callback(`–ö—É–ø–∏—Ç—å ${miner.name}`, `buy_${miner.id}`))
    })

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    const buttonRows = []
    for (let i = 0; i < buttons.length; i += 2) {
      buttonRows.push(buttons.slice(i, i + 2))
    }

    ctx.reply(message, Markup.inlineKeyboard(buttonRows))
  } else {
    ctx.reply("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤.")
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
bot.action(/buy_(\d+)/, async (ctx) => {
  const minerId = Number.parseInt(ctx.match[1])
  const user = await registerUser(ctx.from.id, ctx.from.username)

  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const result = await buyMiner(user.id, minerId)
  await ctx.answerCbQuery() // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
  ctx.reply(result.message)

  if (result.success) {
    ctx.reply(
      `–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç\n–ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${result.mining_power.toFixed(2)} –º–æ–Ω–µ—Ç/–º–∏–Ω`,
    )
  }
})

bot.hears("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const userMiners = await getUserMiners(user.id)

  if (userMiners.length > 0) {
    let message = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    userMiners.forEach((item) => {
      message += `${item.miners.name} x${item.quantity}\n`
      message += `   –ú–æ—â–Ω–æ—Å—Ç—å: ${item.miners.power} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
      message += `   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.miners.price} –º–æ–Ω–µ—Ç\n\n`
    })
    ctx.reply(message)
  } else {
    ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
  }
})

bot.hears("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const { data: transactions, error } = await supabase
    .from("transactions")
    .select("*")
    .eq("user_id", user.id)
    .order("created_at", { ascending: false })
    .limit(5)

  let message = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:\n\n`
  message += `–ò–º—è: ${ctx.from.first_name}\n`
  message += `–ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} –º–æ–Ω–µ—Ç\n`
  message += `–ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${user.mining_power.toFixed(2)} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
  message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.created_at).toLocaleDateString()}\n\n`

  if (!error && transactions.length > 0) {
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n`
    transactions.forEach((tx) => {
      message += `${new Date(tx.created_at).toLocaleString()}: ${tx.amount > 0 ? "+" : ""}${tx.amount.toFixed(2)} (${tx.type})\n`
    })
  }

  ctx.reply(message)
})

bot.hears("‚ùì –ü–æ–º–æ—â—å", (ctx) => {
  ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ú–∞–π–Ω–∏–Ω–≥"!

–í–∞—à–∞ —Ü–µ–ª—å - –¥–æ–±—ã–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚õèÔ∏è –ú–∞–π–Ω–∏—Ç—å - –¥–æ–±—ã–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
üí∞ –ë–∞–ª–∞–Ω—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å
üõí –ú–∞–≥–∞–∑–∏–Ω - –∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∞ –∏–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚ùì –ü–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ß–µ–º –±–æ–ª—å—à–µ –º–æ—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±—ã—Ç—å!
  `)
})

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.command("balance", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

bot.command("mine", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (user) {
    const result = await mineCoins(user.id)
    ctx.reply(result.message)
    if (result.success) {
      ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.balance.toFixed(2)} –º–æ–Ω–µ—Ç`)
    }
  } else {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

bot.command("shop", async (ctx) => {
  const miners = await getAvailableMiners()
  if (miners.length > 0) {
    let message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã:\n\n"
    const buttons = []

    miners.forEach((miner, index) => {
      message += `${index + 1}. ${miner.name}\n`
      message += `   –ú–æ—â–Ω–æ—Å—Ç—å: ${miner.power} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
      message += `   –¶–µ–Ω–∞: ${miner.price} –º–æ–Ω–µ—Ç\n`
      message += `   –û–ø–∏—Å–∞–Ω–∏–µ: ${miner.description}\n\n`

      buttons.push(Markup.button.callback(`–ö—É–ø–∏—Ç—å ${miner.name}`, `buy_${miner.id}`))
    })

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    const buttonRows = []
    for (let i = 0; i < buttons.length; i += 2) {
      buttonRows.push(buttons.slice(i, i + 2))
    }

    ctx.reply(message, Markup.inlineKeyboard(buttonRows))
  } else {
    ctx.reply("–í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤.")
  }
})

bot.command("inventory", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const userMiners = await getUserMiners(user.id)

  if (userMiners.length > 0) {
    let message = "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
    userMiners.forEach((item) => {
      message += `${item.miners.name} x${item.quantity}\n`
      message += `   –ú–æ—â–Ω–æ—Å—Ç—å: ${item.miners.power} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
      message += `   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.miners.price} –º–æ–Ω–µ—Ç\n\n`
    })
    ctx.reply(message)
  } else {
    ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
  }
})

bot.command("stats", async (ctx) => {
  const user = await registerUser(ctx.from.id, ctx.from.username)
  if (!user) {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return
  }

  const { data: transactions, error } = await supabase
    .from("transactions")
    .select("*")
    .eq("user_id", user.id)
    .order("created_at", { ascending: false })
    .limit(5)

  let message = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:\n\n`
  message += `–ò–º—è: ${ctx.from.first_name}\n`
  message += `–ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} –º–æ–Ω–µ—Ç\n`
  message += `–ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: ${user.mining_power.toFixed(2)} –º–æ–Ω–µ—Ç/–º–∏–Ω\n`
  message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.created_at).toLocaleDateString()}\n\n`

  if (!error && transactions.length > 0) {
    message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n`
    transactions.forEach((tx) => {
      message += `${new Date(tx.created_at).toLocaleString()}: ${tx.amount > 0 ? "+" : ""}${tx.amount.toFixed(2)} (${tx.type})\n`
    })
  }

  ctx.reply(message)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err)
  })

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once("SIGINT", () => bot.stop("SIGINT"))
process.once("SIGTERM", () => bot.stop("SIGTERM"))

